
transmissor_multi_agente_stm32f070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800401c  0800401c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800401c  0800401c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800401c  0800401c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000020  08004044  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004044  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac10  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a43  00000000  00000000  0002ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f7ea  00000000  00000000  0002d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0d4  00000000  00000000  0003cf52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c5c3  00000000  00000000  00048026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a45e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df0  00000000  00000000  000a463c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003fbc 	.word	0x08003fbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08003fbc 	.word	0x08003fbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CS_Select>:
#define NRF24_CSN_PIN GPIO_PIN_2


//CS pin low to select the device

void CS_Select(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2200      	movs	r2, #0
 800022a:	2104      	movs	r1, #4
 800022c:	0018      	movs	r0, r3
 800022e:	f001 f836 	bl	800129e <HAL_GPIO_WritePin>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <CS_UnSelect>:

void CS_UnSelect(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2201      	movs	r2, #1
 8000242:	2104      	movs	r1, #4
 8000244:	0018      	movs	r0, r3
 8000246:	f001 f82a 	bl	800129e <HAL_GPIO_WritePin>
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <CE_Enable>:

//RX or TX
void CE_Enable(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000254:	2390      	movs	r3, #144	; 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	2201      	movs	r2, #1
 800025a:	2102      	movs	r1, #2
 800025c:	0018      	movs	r0, r3
 800025e:	f001 f81e 	bl	800129e <HAL_GPIO_WritePin>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <CE_Disable>:

void CE_Disable(void){
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 800026c:	2390      	movs	r3, #144	; 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2200      	movs	r2, #0
 8000272:	2102      	movs	r1, #2
 8000274:	0018      	movs	r0, r3
 8000276:	f001 f812 	bl	800129e <HAL_GPIO_WritePin>
}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <nrf24_WriteReg>:

//write a single bite to a particular register
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	0002      	movs	r2, r0
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	701a      	strb	r2, [r3, #0]
 800028c:	1dbb      	adds	r3, r7, #6
 800028e:	1c0a      	adds	r2, r1, #0
 8000290:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5; //bitwise
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2220      	movs	r2, #32
 8000298:	4313      	orrs	r3, r2
 800029a:	b2da      	uxtb	r2, r3
 800029c:	240c      	movs	r4, #12
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	701a      	strb	r2, [r3, #0]
	buf[1] = Data;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	1dba      	adds	r2, r7, #6
 80002a6:	7812      	ldrb	r2, [r2, #0]
 80002a8:	705a      	strb	r2, [r3, #1]

	//selecting a device
	CS_Select();
 80002aa:	f7ff ffb9 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002ae:	23fa      	movs	r3, #250	; 0xfa
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	1939      	adds	r1, r7, r4
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <nrf24_WriteReg+0x48>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	f001 fe26 	bl	8001f08 <HAL_SPI_Transmit>

	// pull the cs pin to high to release the device
	CS_UnSelect();
 80002bc:	f7ff ffbc 	bl	8000238 <CS_UnSelect>
}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b005      	add	sp, #20
 80002c6:	bd90      	pop	{r4, r7, pc}
 80002c8:	2000003c 	.word	0x2000003c

080002cc <nrf24_WriteRegMulti>:

//write multiple bytes to a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t* data, int size){
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b087      	sub	sp, #28
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60b9      	str	r1, [r7, #8]
 80002d4:	607a      	str	r2, [r7, #4]
 80002d6:	210f      	movs	r1, #15
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	1c02      	adds	r2, r0, #0
 80002dc:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5; //bitwise
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2220      	movs	r2, #32
 80002e4:	4313      	orrs	r3, r2
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	2414      	movs	r4, #20
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	701a      	strb	r2, [r3, #0]
//	buf[1] = Data;

	//selecting a device
	CS_Select();
 80002ee:	f7ff ff97 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80002f2:	1939      	adds	r1, r7, r4
 80002f4:	4809      	ldr	r0, [pc, #36]	; (800031c <nrf24_WriteRegMulti+0x50>)
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	2201      	movs	r2, #1
 80002fa:	f001 fe05 	bl	8001f08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	b29a      	uxth	r2, r3
 8000302:	23fa      	movs	r3, #250	; 0xfa
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <nrf24_WriteRegMulti+0x50>)
 800030a:	f001 fdfd 	bl	8001f08 <HAL_SPI_Transmit>

	// pull the cs pin to high to release the device
	CS_UnSelect();
 800030e:	f7ff ff93 	bl	8000238 <CS_UnSelect>
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b007      	add	sp, #28
 8000318:	bd90      	pop	{r4, r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	2000003c 	.word	0x2000003c

08000320 <nrf24_ReadReg>:

//return the data
uint8_t nrf24_ReadReg(uint8_t Reg){
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	0002      	movs	r2, r0
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 800032c:	240f      	movs	r4, #15
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
	//selecting a device
	CS_Select();
 8000334:	f7ff ff74 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000338:	1df9      	adds	r1, r7, #7
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <nrf24_ReadReg+0x40>)
 800033c:	2364      	movs	r3, #100	; 0x64
 800033e:	2201      	movs	r2, #1
 8000340:	f001 fde2 	bl	8001f08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000344:	1939      	adds	r1, r7, r4
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <nrf24_ReadReg+0x40>)
 8000348:	2364      	movs	r3, #100	; 0x64
 800034a:	2201      	movs	r2, #1
 800034c:	f001 ff3c 	bl	80021c8 <HAL_SPI_Receive>

	// pull the cs pin to high to release the device
	CS_UnSelect();
 8000350:	f7ff ff72 	bl	8000238 <CS_UnSelect>

	return data;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	781b      	ldrb	r3, [r3, #0]
}
 8000358:	0018      	movs	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	b005      	add	sp, #20
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	2000003c 	.word	0x2000003c

08000364 <nrfsendCmd>:
	// pull the cs pin to high to release the device
	CS_UnSelect();
}

//send  the command to the NRF
void nrfsendCmd (uint8_t cmd){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	0002      	movs	r2, r0
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	701a      	strb	r2, [r3, #0]
	//selecting a device
	CS_Select();
 8000370:	f7ff ff56 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000374:	1df9      	adds	r1, r7, #7
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <nrfsendCmd+0x28>)
 8000378:	2364      	movs	r3, #100	; 0x64
 800037a:	2201      	movs	r2, #1
 800037c:	f001 fdc4 	bl	8001f08 <HAL_SPI_Transmit>

	// pull the cs pin to high to release the device
	CS_UnSelect();
 8000380:	f7ff ff5a 	bl	8000238 <CS_UnSelect>
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000003c 	.word	0x2000003c

08000390 <nrf24_reset>:

//reseting the device
void nrf24_reset(uint8_t REG)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	0002      	movs	r2, r0
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	701a      	strb	r2, [r3, #0]
	if (REG == STATUS)
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b07      	cmp	r3, #7
 80003a2:	d104      	bne.n	80003ae <nrf24_reset+0x1e>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80003a4:	2100      	movs	r1, #0
 80003a6:	2007      	movs	r0, #7
 80003a8:	f7ff ff6a 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80003ac:	e08b      	b.n	80004c6 <nrf24_reset+0x136>
	else if (REG == FIFO_STATUS)
 80003ae:	1dfb      	adds	r3, r7, #7
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b17      	cmp	r3, #23
 80003b4:	d104      	bne.n	80003c0 <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003b6:	2111      	movs	r1, #17
 80003b8:	2017      	movs	r0, #23
 80003ba:	f7ff ff61 	bl	8000280 <nrf24_WriteReg>
}
 80003be:	e082      	b.n	80004c6 <nrf24_reset+0x136>
	nrf24_WriteReg(CONFIG, 0x08);
 80003c0:	2108      	movs	r1, #8
 80003c2:	2000      	movs	r0, #0
 80003c4:	f7ff ff5c 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80003c8:	213f      	movs	r1, #63	; 0x3f
 80003ca:	2001      	movs	r0, #1
 80003cc:	f7ff ff58 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80003d0:	2103      	movs	r1, #3
 80003d2:	2002      	movs	r0, #2
 80003d4:	f7ff ff54 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003d8:	2103      	movs	r1, #3
 80003da:	2003      	movs	r0, #3
 80003dc:	f7ff ff50 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80003e0:	2103      	movs	r1, #3
 80003e2:	2004      	movs	r0, #4
 80003e4:	f7ff ff4c 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80003e8:	2102      	movs	r1, #2
 80003ea:	2005      	movs	r0, #5
 80003ec:	f7ff ff48 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80003f0:	210e      	movs	r1, #14
 80003f2:	2006      	movs	r0, #6
 80003f4:	f7ff ff44 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2007      	movs	r0, #7
 80003fc:	f7ff ff40 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000400:	2100      	movs	r1, #0
 8000402:	2008      	movs	r0, #8
 8000404:	f7ff ff3c 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000408:	2100      	movs	r1, #0
 800040a:	2009      	movs	r0, #9
 800040c:	f7ff ff38 	bl	8000280 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000410:	2018      	movs	r0, #24
 8000412:	183b      	adds	r3, r7, r0
 8000414:	4a2e      	ldr	r2, [pc, #184]	; (80004d0 <nrf24_reset+0x140>)
 8000416:	6811      	ldr	r1, [r2, #0]
 8000418:	6019      	str	r1, [r3, #0]
 800041a:	7912      	ldrb	r2, [r2, #4]
 800041c:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800041e:	183b      	adds	r3, r7, r0
 8000420:	2205      	movs	r2, #5
 8000422:	0019      	movs	r1, r3
 8000424:	200a      	movs	r0, #10
 8000426:	f7ff ff51 	bl	80002cc <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800042a:	2010      	movs	r0, #16
 800042c:	183b      	adds	r3, r7, r0
 800042e:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <nrf24_reset+0x144>)
 8000430:	6811      	ldr	r1, [r2, #0]
 8000432:	6019      	str	r1, [r3, #0]
 8000434:	7912      	ldrb	r2, [r2, #4]
 8000436:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000438:	183b      	adds	r3, r7, r0
 800043a:	2205      	movs	r2, #5
 800043c:	0019      	movs	r1, r3
 800043e:	200b      	movs	r0, #11
 8000440:	f7ff ff44 	bl	80002cc <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000444:	21c3      	movs	r1, #195	; 0xc3
 8000446:	200c      	movs	r0, #12
 8000448:	f7ff ff1a 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800044c:	21c4      	movs	r1, #196	; 0xc4
 800044e:	200d      	movs	r0, #13
 8000450:	f7ff ff16 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000454:	21c5      	movs	r1, #197	; 0xc5
 8000456:	200e      	movs	r0, #14
 8000458:	f7ff ff12 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800045c:	21c6      	movs	r1, #198	; 0xc6
 800045e:	200f      	movs	r0, #15
 8000460:	f7ff ff0e 	bl	8000280 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000464:	2008      	movs	r0, #8
 8000466:	183b      	adds	r3, r7, r0
 8000468:	4a19      	ldr	r2, [pc, #100]	; (80004d0 <nrf24_reset+0x140>)
 800046a:	6811      	ldr	r1, [r2, #0]
 800046c:	6019      	str	r1, [r3, #0]
 800046e:	7912      	ldrb	r2, [r2, #4]
 8000470:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000472:	183b      	adds	r3, r7, r0
 8000474:	2205      	movs	r2, #5
 8000476:	0019      	movs	r1, r3
 8000478:	2010      	movs	r0, #16
 800047a:	f7ff ff27 	bl	80002cc <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	2011      	movs	r0, #17
 8000482:	f7ff fefd 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000486:	2100      	movs	r1, #0
 8000488:	2012      	movs	r0, #18
 800048a:	f7ff fef9 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800048e:	2100      	movs	r1, #0
 8000490:	2013      	movs	r0, #19
 8000492:	f7ff fef5 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000496:	2100      	movs	r1, #0
 8000498:	2014      	movs	r0, #20
 800049a:	f7ff fef1 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800049e:	2100      	movs	r1, #0
 80004a0:	2015      	movs	r0, #21
 80004a2:	f7ff feed 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80004a6:	2100      	movs	r1, #0
 80004a8:	2016      	movs	r0, #22
 80004aa:	f7ff fee9 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004ae:	2111      	movs	r1, #17
 80004b0:	2017      	movs	r0, #23
 80004b2:	f7ff fee5 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80004b6:	2100      	movs	r1, #0
 80004b8:	201c      	movs	r0, #28
 80004ba:	f7ff fee1 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80004be:	2100      	movs	r1, #0
 80004c0:	201d      	movs	r0, #29
 80004c2:	f7ff fedd 	bl	8000280 <nrf24_WriteReg>
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b008      	add	sp, #32
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	08003fd4 	.word	0x08003fd4
 80004d4:	08003fdc 	.word	0x08003fdc

080004d8 <NRF24_Init>:

void NRF24_Init (void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	//configuring the nrf24
	//disable the chip before configuring device
	CE_Disable();
 80004dc:	f7ff fec4 	bl	8000268 <CE_Disable>

	//reset
	nrf24_reset (0);
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff ff55 	bl	8000390 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0); //later
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff fec9 	bl	8000280 <nrf24_WriteReg>

	//non-using shockburst auto ack
	nrf24_WriteReg(EN_AA, 0);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fec5 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg(EN_RXADDR, 0); // non pipe receiving
 80004f6:	2100      	movs	r1, #0
 80004f8:	2002      	movs	r0, #2
 80004fa:	f7ff fec1 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_AW, 0x03); // 5 bytes for rx/tx address
 80004fe:	2103      	movs	r1, #3
 8000500:	2003      	movs	r0, #3
 8000502:	f7ff febd 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_RETR, 0); // non re-transsmit with ack mode
 8000506:	2100      	movs	r1, #0
 8000508:	2004      	movs	r0, #4
 800050a:	f7ff feb9 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg(RF_CH, 0); //setup in the rx tx modes
 800050e:	2100      	movs	r1, #0
 8000510:	2005      	movs	r0, #5
 8000512:	f7ff feb5 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg(RF_SETUP, 0x0E); //power = 0db, data rate = 2mbps
 8000516:	210e      	movs	r1, #14
 8000518:	2006      	movs	r0, #6
 800051a:	f7ff feb1 	bl	8000280 <nrf24_WriteReg>

	//enable the chip
	CE_Enable();
 800051e:	f7ff fe97 	bl	8000250 <CE_Enable>
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <NRF24_TxMode>:

// set up the tx mode
void NRF24_TxMode(uint8_t *Address, uint8_t channel){
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	000a      	movs	r2, r1
 8000532:	1cfb      	adds	r3, r7, #3
 8000534:	701a      	strb	r2, [r3, #0]
	//disable the chip before configuring device
	CE_Disable();
 8000536:	f7ff fe97 	bl	8000268 <CE_Disable>

	nrf24_WriteReg(RF_CH, channel);
 800053a:	1cfb      	adds	r3, r7, #3
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	0019      	movs	r1, r3
 8000540:	2005      	movs	r0, #5
 8000542:	f7ff fe9d 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5); //write the tx address
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2205      	movs	r2, #5
 800054a:	0019      	movs	r1, r3
 800054c:	2010      	movs	r0, #16
 800054e:	f7ff febd 	bl	80002cc <nrf24_WriteRegMulti>

	//pwr up the device, dont modifying other bits
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000552:	250f      	movs	r5, #15
 8000554:	197c      	adds	r4, r7, r5
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff fee2 	bl	8000320 <nrf24_ReadReg>
 800055c:	0003      	movs	r3, r0
 800055e:	7023      	strb	r3, [r4, #0]
	config = config & (0xF2);
 8000560:	0028      	movs	r0, r5
 8000562:	183b      	adds	r3, r7, r0
 8000564:	183a      	adds	r2, r7, r0
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	210d      	movs	r1, #13
 800056a:	438a      	bics	r2, r1
 800056c:	701a      	strb	r2, [r3, #0]
	config = config | (1<<1); //bitwise operation
 800056e:	183b      	adds	r3, r7, r0
 8000570:	183a      	adds	r2, r7, r0
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
	nrf24_WriteReg(CONFIG, config);
 800057a:	183b      	adds	r3, r7, r0
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	0019      	movs	r1, r3
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff fe7d 	bl	8000280 <nrf24_WriteReg>

	//enable the chip
	CE_Enable();
 8000586:	f7ff fe63 	bl	8000250 <CE_Enable>
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b004      	add	sp, #16
 8000590:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000594 <NRF24_Transmit>:


//transmite the data
uint8_t NRF24_Transmit (uint8_t* data){
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint8_t cmdToSend = 0;
 800059c:	250e      	movs	r5, #14
 800059e:	197b      	adds	r3, r7, r5
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]

	//select the device
	CS_Select();
 80005a4:	f7ff fe3c 	bl	8000220 <CS_Select>

	//payload command
	cmdToSend = W_TX_PAYLOAD;
 80005a8:	197b      	adds	r3, r7, r5
 80005aa:	22a0      	movs	r2, #160	; 0xa0
 80005ac:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(NRF24_SPI, &cmdToSend, 1, 100);
 80005ae:	1979      	adds	r1, r7, r5
 80005b0:	4818      	ldr	r0, [pc, #96]	; (8000614 <NRF24_Transmit+0x80>)
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	2201      	movs	r2, #1
 80005b6:	f001 fca7 	bl	8001f08 <HAL_SPI_Transmit>

	//send to payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000); //32 BITS?
 80005ba:	23fa      	movs	r3, #250	; 0xfa
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	4814      	ldr	r0, [pc, #80]	; (8000614 <NRF24_Transmit+0x80>)
 80005c2:	2220      	movs	r2, #32
 80005c4:	f001 fca0 	bl	8001f08 <HAL_SPI_Transmit>

	//unselect the device
	CS_UnSelect();
 80005c8:	f7ff fe36 	bl	8000238 <CS_UnSelect>

	//make sure that the pipe is empty
	HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fb43 	bl	8000c58 <HAL_Delay>
	uint8_t fifoStatus = nrf24_ReadReg(FIFO_STATUS);
 80005d2:	260f      	movs	r6, #15
 80005d4:	19bc      	adds	r4, r7, r6
 80005d6:	2017      	movs	r0, #23
 80005d8:	f7ff fea2 	bl	8000320 <nrf24_ReadReg>
 80005dc:	0003      	movs	r3, r0
 80005de:	7023      	strb	r3, [r4, #0]

	if 	((fifoStatus&(1<<4)) && (!(fifoStatus&(1<<3)))) {
 80005e0:	0031      	movs	r1, r6
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2210      	movs	r2, #16
 80005e8:	4013      	ands	r3, r2
 80005ea:	d00e      	beq.n	800060a <NRF24_Transmit+0x76>
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2208      	movs	r2, #8
 80005f2:	4013      	ands	r3, r2
 80005f4:	d109      	bne.n	800060a <NRF24_Transmit+0x76>
		cmdToSend = FLUSH_TX;
 80005f6:	197b      	adds	r3, r7, r5
 80005f8:	22e1      	movs	r2, #225	; 0xe1
 80005fa:	701a      	strb	r2, [r3, #0]
		nrfsendCmd(cmdToSend);
 80005fc:	197b      	adds	r3, r7, r5
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff feaf 	bl	8000364 <nrfsendCmd>

		return 1;
 8000606:	2301      	movs	r3, #1
 8000608:	e000      	b.n	800060c <NRF24_Transmit+0x78>
	}

	//flag to failed operation
	return 0;
 800060a:	2300      	movs	r3, #0
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	b005      	add	sp, #20
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	2000003c 	.word	0x2000003c

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fab8 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f858 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f924 	bl	8000870 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000628:	f000 f8f2 	bl	8000810 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800062c:	f000 f8b2 	bl	8000794 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 8000630:	f7ff ff52 	bl	80004d8 <NRF24_Init>
  NRF24_TxMode(TxAddress, 10);
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <main+0xac>)
 8000636:	210a      	movs	r1, #10
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff ff75 	bl	8000528 <NRF24_TxMode>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //--------[ Read The Received Character & Toggle LEDs Accordingly ]--------
	      if(RX1_Char == '1')
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <main+0xb0>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b31      	cmp	r3, #49	; 0x31
 8000644:	d10e      	bne.n	8000664 <main+0x4c>
	      {
	    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2101      	movs	r1, #1
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fe43 	bl	80012d8 <HAL_GPIO_TogglePin>
	        HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 8000652:	491d      	ldr	r1, [pc, #116]	; (80006c8 <main+0xb0>)
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <main+0xb4>)
 8000656:	2201      	movs	r2, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f002 fb11 	bl	8002c80 <HAL_UART_Receive_IT>
	        RX1_Char = 0x00;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <main+0xb0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	      }
	      if(RX1_Char == '2')
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <main+0xb0>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b32      	cmp	r3, #50	; 0x32
 800066a:	d10e      	bne.n	800068a <main+0x72>
	      {
	    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2101      	movs	r1, #1
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fe30 	bl	80012d8 <HAL_GPIO_TogglePin>
	        HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 8000678:	4913      	ldr	r1, [pc, #76]	; (80006c8 <main+0xb0>)
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <main+0xb4>)
 800067c:	2201      	movs	r2, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fafe 	bl	8002c80 <HAL_UART_Receive_IT>
	        RX1_Char = 0x00;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <main+0xb0>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	      }
	      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) { // Substitua x pelo número do pino GPIO
 800068a:	2390      	movs	r3, #144	; 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2108      	movs	r1, #8
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fde7 	bl	8001264 <HAL_GPIO_ReadPin>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d101      	bne.n	800069e <main+0x86>
	              // Botão de reset pressionado
	              // Realize a ação de reinicialização aqui
	              // Por exemplo:
	              HAL_NVIC_SystemReset(); // Reinicialização usando HAL
 800069a:	f000 fbe4 	bl	8000e66 <HAL_NVIC_SystemReset>
	      }
	      if (NRF24_Transmit(TxData) == 1){
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <main+0xb8>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ff77 	bl	8000594 <NRF24_Transmit>
 80006a6:	0003      	movs	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d1c8      	bne.n	800063e <main+0x26>
	    	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	2101      	movs	r1, #1
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fe10 	bl	80012d8 <HAL_GPIO_TogglePin>
	    	  HAL_Delay(1000);
 80006b8:	23fa      	movs	r3, #250	; 0xfa
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 facb 	bl	8000c58 <HAL_Delay>
	      if(RX1_Char == '1')
 80006c2:	e7bc      	b.n	800063e <main+0x26>
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000128 	.word	0x20000128
 80006cc:	200000a0 	.word	0x200000a0
 80006d0:	20000008 	.word	0x20000008

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b097      	sub	sp, #92	; 0x5c
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	2428      	movs	r4, #40	; 0x28
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	0018      	movs	r0, r3
 80006e0:	2330      	movs	r3, #48	; 0x30
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f003 fc61 	bl	8003fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ea:	2318      	movs	r3, #24
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	2310      	movs	r3, #16
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f003 fc59 	bl	8003fac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2314      	movs	r3, #20
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f003 fc52 	bl	8003fac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2201      	movs	r2, #1
 8000714:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2202      	movs	r2, #2
 800071a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	0252      	lsls	r2, r2, #9
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	22a0      	movs	r2, #160	; 0xa0
 8000728:	0392      	lsls	r2, r2, #14
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV5;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2204      	movs	r2, #4
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	187b      	adds	r3, r7, r1
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fdeb 	bl	8001310 <HAL_RCC_OscConfig>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800073e:	f000 f8ef 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	2118      	movs	r1, #24
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2207      	movs	r2, #7
 8000748:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2202      	movs	r2, #2
 800074e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2101      	movs	r1, #1
 8000760:	0018      	movs	r0, r3
 8000762:	f001 f8f3 	bl	800194c <HAL_RCC_ClockConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076a:	f000 f8d9 	bl	8000920 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fa2d 	bl	8001bdc <HAL_RCCEx_PeriphCLKConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000786:	f000 f8cb 	bl	8000920 <Error_Handler>
  }
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b017      	add	sp, #92	; 0x5c
 8000790:	bd90      	pop	{r4, r7, pc}
	...

08000794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_SPI1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_SPI1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_SPI1_Init+0x74>)
 80007a0:	2282      	movs	r2, #130	; 0x82
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ae:	22e0      	movs	r2, #224	; 0xe0
 80007b0:	00d2      	lsls	r2, r2, #3
 80007b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI1_Init+0x74>)
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ca:	2210      	movs	r2, #16
 80007cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI1_Init+0x74>)
 80007e2:	2207      	movs	r2, #7
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ee:	2208      	movs	r2, #8
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_SPI1_Init+0x74>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 facf 	bl	8001d98 <HAL_SPI_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 f88f 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000003c 	.word	0x2000003c
 800080c:	40013000 	.word	0x40013000

08000810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART1_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800081c:	22e1      	movs	r2, #225	; 0xe1
 800081e:	0252      	lsls	r2, r2, #9
 8000820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000854:	0018      	movs	r0, r3
 8000856:	f002 f9bf 	bl	8002bd8 <HAL_UART_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f85f 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000a0 	.word	0x200000a0
 800086c:	40013800 	.word	0x40013800

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	240c      	movs	r4, #12
 8000878:	193b      	adds	r3, r7, r4
 800087a:	0018      	movs	r0, r3
 800087c:	2314      	movs	r3, #20
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f003 fb93 	bl	8003fac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_GPIO_Init+0xac>)
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_GPIO_Init+0xac>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	03c9      	lsls	r1, r1, #15
 8000890:	430a      	orrs	r2, r1
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_GPIO_Init+0xac>)
 8000896:	695a      	ldr	r2, [r3, #20]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	03db      	lsls	r3, r3, #15
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_GPIO_Init+0xac>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_GPIO_Init+0xac>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0289      	lsls	r1, r1, #10
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_GPIO_Init+0xac>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	4013      	ands	r3, r2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|CHIP_ENABLE_Pin|CHIP_SELECT_NOT_Pin, GPIO_PIN_RESET);
 80008be:	2390      	movs	r3, #144	; 0x90
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2200      	movs	r2, #0
 80008c4:	2107      	movs	r1, #7
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fce9 	bl	800129e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 CHIP_ENABLE_Pin CHIP_SELECT_NOT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|CHIP_ENABLE_Pin|CHIP_SELECT_NOT_Pin;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2207      	movs	r2, #7
 80008d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	193a      	adds	r2, r7, r4
 80008e6:	2390      	movs	r3, #144	; 0x90
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fb49 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Pin */
  GPIO_InitStruct.Pin = Reset_Pin;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2208      	movs	r2, #8
 80008f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2201      	movs	r2, #1
 8000902:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Reset_GPIO_Port, &GPIO_InitStruct);
 8000904:	193a      	adds	r2, r7, r4
 8000906:	2390      	movs	r3, #144	; 0x90
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fb39 	bl	8000f84 <HAL_GPIO_Init>

}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b009      	add	sp, #36	; 0x24
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	40021000 	.word	0x40021000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_MspInit+0x44>)
 8000934:	699a      	ldr	r2, [r3, #24]
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_MspInit+0x44>)
 8000938:	2101      	movs	r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	619a      	str	r2, [r3, #24]
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_MspInit+0x44>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	4013      	ands	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x44>)
 800094c:	69da      	ldr	r2, [r3, #28]
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_MspInit+0x44>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	0549      	lsls	r1, r1, #21
 8000954:	430a      	orrs	r2, r1
 8000956:	61da      	str	r2, [r3, #28]
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_MspInit+0x44>)
 800095a:	69da      	ldr	r2, [r3, #28]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	055b      	lsls	r3, r3, #21
 8000960:	4013      	ands	r3, r2
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b08b      	sub	sp, #44	; 0x2c
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	2414      	movs	r4, #20
 800097e:	193b      	adds	r3, r7, r4
 8000980:	0018      	movs	r0, r3
 8000982:	2314      	movs	r3, #20
 8000984:	001a      	movs	r2, r3
 8000986:	2100      	movs	r1, #0
 8000988:	f003 fb10 	bl	8003fac <memset>
  if(hspi->Instance==SPI1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <HAL_SPI_MspInit+0x90>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d132      	bne.n	80009fc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_SPI_MspInit+0x94>)
 8000998:	699a      	ldr	r2, [r3, #24]
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_SPI_MspInit+0x94>)
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	0149      	lsls	r1, r1, #5
 80009a0:	430a      	orrs	r2, r1
 80009a2:	619a      	str	r2, [r3, #24]
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_SPI_MspInit+0x94>)
 80009a6:	699a      	ldr	r2, [r3, #24]
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	015b      	lsls	r3, r3, #5
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_SPI_MspInit+0x94>)
 80009b4:	695a      	ldr	r2, [r3, #20]
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_SPI_MspInit+0x94>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0289      	lsls	r1, r1, #10
 80009bc:	430a      	orrs	r2, r1
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_SPI_MspInit+0x94>)
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	029b      	lsls	r3, r3, #10
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009ce:	0021      	movs	r1, r4
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	22e0      	movs	r2, #224	; 0xe0
 80009d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2202      	movs	r2, #2
 80009da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2203      	movs	r2, #3
 80009e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	187a      	adds	r2, r7, r1
 80009f0:	2390      	movs	r3, #144	; 0x90
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fac4 	bl	8000f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b00b      	add	sp, #44	; 0x2c
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	40013000 	.word	0x40013000
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	2414      	movs	r4, #20
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	2314      	movs	r3, #20
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f003 fac4 	bl	8003fac <memset>
  if(huart->Instance==USART1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <HAL_UART_MspInit+0xa4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d13b      	bne.n	8000aa6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a30:	699a      	ldr	r2, [r3, #24]
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	01c9      	lsls	r1, r1, #7
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	619a      	str	r2, [r3, #24]
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	01db      	lsls	r3, r3, #7
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0289      	lsls	r1, r1, #10
 8000a54:	430a      	orrs	r2, r1
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a5a:	695a      	ldr	r2, [r3, #20]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	029b      	lsls	r3, r3, #10
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	22c0      	movs	r2, #192	; 0xc0
 8000a6a:	00d2      	lsls	r2, r2, #3
 8000a6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	0021      	movs	r1, r4
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2202      	movs	r2, #2
 8000a74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2201      	movs	r2, #1
 8000a86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	187a      	adds	r2, r7, r1
 8000a8a:	2390      	movs	r3, #144	; 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fa77 	bl	8000f84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	201b      	movs	r0, #27
 8000a9c:	f000 f9be 	bl	8000e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aa0:	201b      	movs	r0, #27
 8000aa2:	f000 f9d0 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b00b      	add	sp, #44	; 0x2c
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f8a0 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <USART1_IRQHandler+0x14>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 f91e 	bl	8002d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	200000a0 	.word	0x200000a0

08000b00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b10:	f7ff fff6 	bl	8000b00 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b16:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b18:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <LoopForever+0xa>)
    CMP R1, R2
 8000b1c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b1e:	d105      	bne.n	8000b2c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b22:	4912      	ldr	r1, [pc, #72]	; (8000b6c <LoopForever+0x12>)
    STR R1, [R0]
 8000b24:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b26:	4812      	ldr	r0, [pc, #72]	; (8000b70 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b28:	4912      	ldr	r1, [pc, #72]	; (8000b74 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b2a:	6001      	str	r1, [r0, #0]

08000b2c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b2e:	4913      	ldr	r1, [pc, #76]	; (8000b7c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <LoopForever+0x26>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b44:	4c10      	ldr	r4, [pc, #64]	; (8000b88 <LoopForever+0x2e>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b52:	f003 fa07 	bl	8003f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b56:	f7ff fd5f 	bl	8000618 <main>

08000b5a <LoopForever>:

LoopForever:
    b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   r0, =_estack
 8000b5c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000b60:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b64:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000b68:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000b6c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b70:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b74:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b80:	08004024 	.word	0x08004024
  ldr r2, =_sbss
 8000b84:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b88:	20000130 	.word	0x20000130

08000b8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_IRQHandler>
	...

08000b90 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <HAL_Init+0x24>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_Init+0x24>)
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f809 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba6:	f7ff fec1 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bc2:	681c      	ldr	r4, [r3, #0]
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_InitTick+0x60>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	0019      	movs	r1, r3
 8000bca:	23fa      	movs	r3, #250	; 0xfa
 8000bcc:	0098      	lsls	r0, r3, #2
 8000bce:	f7ff fa9b 	bl	8000108 <__udivsi3>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	0020      	movs	r0, r4
 8000bd8:	f7ff fa96 	bl	8000108 <__udivsi3>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 f945 	bl	8000e6e <HAL_SYSTICK_Config>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e00f      	b.n	8000c0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d80b      	bhi.n	8000c0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f90e 	bl	8000e1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_InitTick+0x64>)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b003      	add	sp, #12
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	20000014 	.word	0x20000014
 8000c18:	2000001c 	.word	0x2000001c
 8000c1c:	20000018 	.word	0x20000018

08000c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x1c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	001a      	movs	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x20>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	18d2      	adds	r2, r2, r3
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_IncTick+0x20>)
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	2000001c 	.word	0x2000001c
 8000c40:	2000012c 	.word	0x2000012c

08000c44 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <HAL_GetTick+0x10>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	2000012c 	.word	0x2000012c

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff fff0 	bl	8000c44 <HAL_GetTick>
 8000c64:	0003      	movs	r3, r0
 8000c66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	d005      	beq.n	8000c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_Delay+0x44>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	001a      	movs	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	189b      	adds	r3, r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	f7ff ffe0 	bl	8000c44 <HAL_GetTick>
 8000c84:	0002      	movs	r2, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d8f7      	bhi.n	8000c80 <HAL_Delay+0x28>
  {
  }
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	2000001c 	.word	0x2000001c

08000ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb2:	d809      	bhi.n	8000cc8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	001a      	movs	r2, r3
 8000cba:	231f      	movs	r3, #31
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_EnableIRQ+0x30>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4091      	lsls	r1, r2
 8000cc4:	000a      	movs	r2, r1
 8000cc6:	601a      	str	r2, [r3, #0]
  }
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	0002      	movs	r2, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ce8:	d828      	bhi.n	8000d3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cea:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <__NVIC_SetPriority+0xd4>)
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	33c0      	adds	r3, #192	; 0xc0
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	589b      	ldr	r3, [r3, r2]
 8000cfa:	1dfa      	adds	r2, r7, #7
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	0011      	movs	r1, r2
 8000d00:	2203      	movs	r2, #3
 8000d02:	400a      	ands	r2, r1
 8000d04:	00d2      	lsls	r2, r2, #3
 8000d06:	21ff      	movs	r1, #255	; 0xff
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	22ff      	movs	r2, #255	; 0xff
 8000d18:	401a      	ands	r2, r3
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2303      	movs	r3, #3
 8000d22:	4003      	ands	r3, r0
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	481f      	ldr	r0, [pc, #124]	; (8000da8 <__NVIC_SetPriority+0xd4>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	430a      	orrs	r2, r1
 8000d34:	33c0      	adds	r3, #192	; 0xc0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d3a:	e031      	b.n	8000da0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <__NVIC_SetPriority+0xd8>)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0019      	movs	r1, r3
 8000d44:	230f      	movs	r3, #15
 8000d46:	400b      	ands	r3, r1
 8000d48:	3b08      	subs	r3, #8
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3306      	adds	r3, #6
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	3304      	adds	r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <__NVIC_SetPriority+0xd8>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	001c      	movs	r4, r3
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	4023      	ands	r3, r4
 8000d90:	3b08      	subs	r3, #8
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	430a      	orrs	r2, r1
 8000d96:	3306      	adds	r3, #6
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	18c3      	adds	r3, r0, r3
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000db4:	f3bf 8f4f 	dsb	sy
}
 8000db8:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_SystemReset+0x1c>)
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SystemReset+0x20>)
 8000dbe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc0:	f3bf 8f4f 	dsb	sy
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	e7fd      	b.n	8000dc6 <__NVIC_SystemReset+0x16>
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	e000ed00 	.word	0xe000ed00
 8000dd0:	05fa0004 	.word	0x05fa0004

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	1e5a      	subs	r2, r3, #1
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	045b      	lsls	r3, r3, #17
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d301      	bcc.n	8000dec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de8:	2301      	movs	r3, #1
 8000dea:	e010      	b.n	8000e0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <SysTick_Config+0x44>)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	3a01      	subs	r2, #1
 8000df2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df4:	2301      	movs	r3, #1
 8000df6:	425b      	negs	r3, r3
 8000df8:	2103      	movs	r1, #3
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff ff6a 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x44>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x44>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	210f      	movs	r1, #15
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	1c02      	adds	r2, r0, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff4b 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff21 	bl	8000ca0 <__NVIC_EnableIRQ>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000e6a:	f7ff ffa1 	bl	8000db0 <__NVIC_SystemReset>

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ffab 	bl	8000dd4 <SysTick_Config>
 8000e7e:	0003      	movs	r3, r0
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2221      	movs	r2, #33	; 0x21
 8000e94:	5c9b      	ldrb	r3, [r3, r2]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d008      	beq.n	8000eae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e020      	b.n	8000ef0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	210e      	movs	r1, #14
 8000eba:	438a      	bics	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	438a      	bics	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2221      	movs	r2, #33	; 0x21
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	2100      	movs	r1, #0
 8000eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f00:	210f      	movs	r1, #15
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2221      	movs	r2, #33	; 0x21
 8000f0c:	5c9b      	ldrb	r3, [r3, r2]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d006      	beq.n	8000f22 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2204      	movs	r2, #4
 8000f18:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e028      	b.n	8000f74 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	210e      	movs	r1, #14
 8000f2e:	438a      	bics	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2221      	movs	r2, #33	; 0x21
 8000f56:	2101      	movs	r1, #1
 8000f58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	2100      	movs	r1, #0
 8000f60:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	0010      	movs	r0, r2
 8000f72:	4798      	blx	r3
    }
  }
  return status;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b004      	add	sp, #16
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	e14f      	b.n	8001234 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d100      	bne.n	8000fac <HAL_GPIO_Init+0x28>
 8000faa:	e140      	b.n	800122e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d005      	beq.n	8000fc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d130      	bne.n	8001026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	0013      	movs	r3, r2
 8000fd4:	43da      	mvns	r2, r3
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	2201      	movs	r2, #1
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	4013      	ands	r3, r2
 800102e:	2b03      	cmp	r3, #3
 8001030:	d017      	beq.n	8001062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b02      	cmp	r3, #2
 800106c:	d123      	bne.n	80010b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	58d3      	ldr	r3, [r2, r3]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2207      	movs	r2, #7
 8001080:	4013      	ands	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2107      	movs	r1, #7
 800109a:	400b      	ands	r3, r1
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	6939      	ldr	r1, [r7, #16]
 80010b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	401a      	ands	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	23c0      	movs	r3, #192	; 0xc0
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_GPIO_Init+0x174>
 80010f6:	e09a      	b.n	800122e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80010fe:	2101      	movs	r1, #1
 8001100:	430a      	orrs	r2, r1
 8001102:	619a      	str	r2, [r3, #24]
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <HAL_GPIO_Init+0x2c8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2201      	movs	r2, #1
 800110a:	4013      	ands	r3, r2
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x2cc>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	589b      	ldr	r3, [r3, r2]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	409a      	lsls	r2, r3
 800112a:	0013      	movs	r3, r2
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	2390      	movs	r3, #144	; 0x90
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	429a      	cmp	r2, r3
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1e2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a44      	ldr	r2, [pc, #272]	; (8001254 <HAL_GPIO_Init+0x2d0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1de>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a43      	ldr	r2, [pc, #268]	; (8001258 <HAL_GPIO_Init+0x2d4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1da>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a42      	ldr	r2, [pc, #264]	; (800125c <HAL_GPIO_Init+0x2d8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1d6>
 8001156:	2303      	movs	r3, #3
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x1e4>
 800115a:	2305      	movs	r3, #5
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x1e4>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x1e4>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x1e4>
 8001166:	2300      	movs	r3, #0
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	2103      	movs	r1, #3
 800116c:	400a      	ands	r2, r1
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	; (8001250 <HAL_GPIO_Init+0x2cc>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	035b      	lsls	r3, r3, #13
 800119e:	4013      	ands	r3, r2
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	039b      	lsls	r3, r3, #14
 80011c8:	4013      	ands	r3, r2
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	4013      	ands	r3, r2
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	40da      	lsrs	r2, r3
 800123c:	1e13      	subs	r3, r2, #0
 800123e:	d000      	beq.n	8001242 <HAL_GPIO_Init+0x2be>
 8001240:	e6a8      	b.n	8000f94 <HAL_GPIO_Init+0x10>
  } 
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b006      	add	sp, #24
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	48000400 	.word	0x48000400
 8001258:	48000800 	.word	0x48000800
 800125c:	48000c00 	.word	0x48000c00
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	000a      	movs	r2, r1
 800126e:	1cbb      	adds	r3, r7, #2
 8001270:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	1cba      	adds	r2, r7, #2
 8001278:	8812      	ldrh	r2, [r2, #0]
 800127a:	4013      	ands	r3, r2
 800127c:	d004      	beq.n	8001288 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800127e:	230f      	movs	r3, #15
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e003      	b.n	8001290 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]
  }
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	0008      	movs	r0, r1
 80012a8:	0011      	movs	r1, r2
 80012aa:	1cbb      	adds	r3, r7, #2
 80012ac:	1c02      	adds	r2, r0, #0
 80012ae:	801a      	strh	r2, [r3, #0]
 80012b0:	1c7b      	adds	r3, r7, #1
 80012b2:	1c0a      	adds	r2, r1, #0
 80012b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b6:	1c7b      	adds	r3, r7, #1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012be:	1cbb      	adds	r3, r7, #2
 80012c0:	881a      	ldrh	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c6:	e003      	b.n	80012d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c8:	1cbb      	adds	r3, r7, #2
 80012ca:	881a      	ldrh	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	000a      	movs	r2, r1
 80012e2:	1cbb      	adds	r3, r7, #2
 80012e4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ec:	1cbb      	adds	r3, r7, #2
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4013      	ands	r3, r2
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	1cb9      	adds	r1, r7, #2
 80012fc:	8809      	ldrh	r1, [r1, #0]
 80012fe:	400b      	ands	r3, r1
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e305      	b.n	800192e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
 800132a:	d100      	bne.n	800132e <HAL_RCC_OscConfig+0x1e>
 800132c:	e08d      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800132e:	4bc5      	ldr	r3, [pc, #788]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	220c      	movs	r2, #12
 8001334:	4013      	ands	r3, r2
 8001336:	2b04      	cmp	r3, #4
 8001338:	d00e      	beq.n	8001358 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133a:	4bc2      	ldr	r3, [pc, #776]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	220c      	movs	r2, #12
 8001340:	4013      	ands	r3, r2
 8001342:	2b08      	cmp	r3, #8
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x64>
 8001346:	4bbf      	ldr	r3, [pc, #764]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	025b      	lsls	r3, r3, #9
 800134e:	401a      	ands	r2, r3
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	429a      	cmp	r2, r3
 8001356:	d10d      	bne.n	8001374 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	4bba      	ldr	r3, [pc, #744]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	029b      	lsls	r3, r3, #10
 8001360:	4013      	ands	r3, r2
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x56>
 8001364:	e070      	b.n	8001448 <HAL_RCC_OscConfig+0x138>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d000      	beq.n	8001370 <HAL_RCC_OscConfig+0x60>
 800136e:	e06b      	b.n	8001448 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e2dc      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d107      	bne.n	800138c <HAL_RCC_OscConfig+0x7c>
 800137c:	4bb1      	ldr	r3, [pc, #708]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4bb0      	ldr	r3, [pc, #704]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	0249      	lsls	r1, r1, #9
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e02f      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x9e>
 8001394:	4bab      	ldr	r3, [pc, #684]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4baa      	ldr	r3, [pc, #680]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800139a:	49ab      	ldr	r1, [pc, #684]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800139c:	400a      	ands	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	4ba8      	ldr	r3, [pc, #672]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4ba7      	ldr	r3, [pc, #668]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013a6:	49a9      	ldr	r1, [pc, #676]	; (800164c <HAL_RCC_OscConfig+0x33c>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e01e      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d10e      	bne.n	80013d4 <HAL_RCC_OscConfig+0xc4>
 80013b6:	4ba3      	ldr	r3, [pc, #652]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	02c9      	lsls	r1, r1, #11
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	4b9f      	ldr	r3, [pc, #636]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b9e      	ldr	r3, [pc, #632]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0249      	lsls	r1, r1, #9
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 80013d4:	4b9b      	ldr	r3, [pc, #620]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b9a      	ldr	r3, [pc, #616]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013da:	499b      	ldr	r1, [pc, #620]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	4b98      	ldr	r3, [pc, #608]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b97      	ldr	r3, [pc, #604]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013e6:	4999      	ldr	r1, [pc, #612]	; (800164c <HAL_RCC_OscConfig+0x33c>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d014      	beq.n	800141e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc26 	bl	8000c44 <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fe:	f7ff fc21 	bl	8000c44 <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b64      	cmp	r3, #100	; 0x64
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e28e      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	4b8c      	ldr	r3, [pc, #560]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	029b      	lsls	r3, r3, #10
 8001418:	4013      	ands	r3, r2
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0xee>
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fc11 	bl	8000c44 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fc0c 	bl	8000c44 <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e279      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	4b82      	ldr	r3, [pc, #520]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x118>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d100      	bne.n	8001456 <HAL_RCC_OscConfig+0x146>
 8001454:	e06c      	b.n	8001530 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001456:	4b7b      	ldr	r3, [pc, #492]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	220c      	movs	r2, #12
 800145c:	4013      	ands	r3, r2
 800145e:	d00e      	beq.n	800147e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	220c      	movs	r2, #12
 8001466:	4013      	ands	r3, r2
 8001468:	2b08      	cmp	r3, #8
 800146a:	d11f      	bne.n	80014ac <HAL_RCC_OscConfig+0x19c>
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	025b      	lsls	r3, r3, #9
 8001474:	401a      	ands	r2, r3
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	429a      	cmp	r2, r3
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b71      	ldr	r3, [pc, #452]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x184>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e24c      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	22f8      	movs	r2, #248	; 0xf8
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	00da      	lsls	r2, r3, #3
 80014a4:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e041      	b.n	8001530 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d024      	beq.n	80014fe <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b62      	ldr	r3, [pc, #392]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbc0 	bl	8000c44 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fbbb 	bl	8000c44 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e228      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f1      	beq.n	80014ca <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b57      	ldr	r3, [pc, #348]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	22f8      	movs	r2, #248	; 0xf8
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	00da      	lsls	r2, r3, #3
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e018      	b.n	8001530 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b50      	ldr	r3, [pc, #320]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001504:	2101      	movs	r1, #1
 8001506:	438a      	bics	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fb9b 	bl	8000c44 <HAL_GetTick>
 800150e:	0003      	movs	r3, r0
 8001510:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff fb96 	bl	8000c44 <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e203      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d1f1      	bne.n	8001514 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2208      	movs	r2, #8
 8001536:	4013      	ands	r3, r2
 8001538:	d036      	beq.n	80015a8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d019      	beq.n	8001576 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001542:	4b40      	ldr	r3, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001546:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001548:	2101      	movs	r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff fb79 	bl	8000c44 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fb74 	bl	8000c44 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1e1      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d0f1      	beq.n	8001558 <HAL_RCC_OscConfig+0x248>
 8001574:	e018      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800157c:	2101      	movs	r1, #1
 800157e:	438a      	bics	r2, r1
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff fb5f 	bl	8000c44 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fb5a 	bl	8000c44 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1c7      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d1f1      	bne.n	800158c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2204      	movs	r2, #4
 80015ae:	4013      	ands	r3, r2
 80015b0:	d100      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2a4>
 80015b2:	e0b5      	b.n	8001720 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b4:	201f      	movs	r0, #31
 80015b6:	183b      	adds	r3, r7, r0
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	055b      	lsls	r3, r3, #21
 80015c4:	4013      	ands	r3, r2
 80015c6:	d110      	bne.n	80015ea <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0549      	lsls	r1, r1, #21
 80015d2:	430a      	orrs	r2, r1
 80015d4:	61da      	str	r2, [r3, #28]
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	055b      	lsls	r3, r3, #21
 80015de:	4013      	ands	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015e4:	183b      	adds	r3, r7, r0
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0049      	lsls	r1, r1, #1
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001604:	f7ff fb1e 	bl	8000c44 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fb19 	bl	8000c44 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e186      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4013      	ands	r3, r2
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10f      	bne.n	8001654 <HAL_RCC_OscConfig+0x344>
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800163a:	2101      	movs	r1, #1
 800163c:	430a      	orrs	r2, r1
 800163e:	621a      	str	r2, [r3, #32]
 8001640:	e036      	b.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000
 8001648:	fffeffff 	.word	0xfffeffff
 800164c:	fffbffff 	.word	0xfffbffff
 8001650:	40007000 	.word	0x40007000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x366>
 800165c:	4bb6      	ldr	r3, [pc, #728]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	4bb5      	ldr	r3, [pc, #724]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001662:	2101      	movs	r1, #1
 8001664:	438a      	bics	r2, r1
 8001666:	621a      	str	r2, [r3, #32]
 8001668:	4bb3      	ldr	r3, [pc, #716]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	4bb2      	ldr	r3, [pc, #712]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800166e:	2104      	movs	r1, #4
 8001670:	438a      	bics	r2, r1
 8001672:	621a      	str	r2, [r3, #32]
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x388>
 800167e:	4bae      	ldr	r3, [pc, #696]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	4bad      	ldr	r3, [pc, #692]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001684:	2104      	movs	r1, #4
 8001686:	430a      	orrs	r2, r1
 8001688:	621a      	str	r2, [r3, #32]
 800168a:	4bab      	ldr	r3, [pc, #684]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800168c:	6a1a      	ldr	r2, [r3, #32]
 800168e:	4baa      	ldr	r3, [pc, #680]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	621a      	str	r2, [r3, #32]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
 8001698:	4ba7      	ldr	r3, [pc, #668]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	4ba6      	ldr	r3, [pc, #664]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	621a      	str	r2, [r3, #32]
 80016a4:	4ba4      	ldr	r3, [pc, #656]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	4ba3      	ldr	r3, [pc, #652]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80016aa:	2104      	movs	r1, #4
 80016ac:	438a      	bics	r2, r1
 80016ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d014      	beq.n	80016e2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fac4 	bl	8000c44 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fabf 	bl	8000c44 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a9b      	ldr	r2, [pc, #620]	; (800193c <HAL_RCC_OscConfig+0x62c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e12b      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	4b98      	ldr	r3, [pc, #608]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3b2>
 80016e0:	e013      	b.n	800170a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff faaf 	bl	8000c44 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	e009      	b.n	8001700 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff faaa 	bl	8000c44 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a91      	ldr	r2, [pc, #580]	; (800193c <HAL_RCC_OscConfig+0x62c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e116      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	4b8d      	ldr	r3, [pc, #564]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170a:	231f      	movs	r3, #31
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	4b87      	ldr	r3, [pc, #540]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800171a:	4989      	ldr	r1, [pc, #548]	; (8001940 <HAL_RCC_OscConfig+0x630>)
 800171c:	400a      	ands	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2210      	movs	r2, #16
 8001726:	4013      	ands	r3, r2
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d12a      	bne.n	8001788 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001736:	4b80      	ldr	r3, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001738:	2104      	movs	r1, #4
 800173a:	430a      	orrs	r2, r1
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800173e:	4b7e      	ldr	r3, [pc, #504]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fa7b 	bl	8000c44 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001754:	f7ff fa76 	bl	8000c44 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0e3      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001766:	4b74      	ldr	r3, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d0f1      	beq.n	8001754 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001770:	4b71      	ldr	r3, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	22f8      	movs	r2, #248	; 0xf8
 8001776:	4393      	bics	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	00da      	lsls	r2, r3, #3
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001782:	430a      	orrs	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	e034      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	3305      	adds	r3, #5
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001790:	4b69      	ldr	r3, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001796:	2104      	movs	r1, #4
 8001798:	438a      	bics	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800179c:	4b66      	ldr	r3, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	22f8      	movs	r2, #248	; 0xf8
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	00da      	lsls	r2, r3, #3
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
 80017b2:	e01e      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017ba:	2104      	movs	r1, #4
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017c0:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fa3a 	bl	8000c44 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017d6:	f7ff fa35 	bl	8000c44 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0a2      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f1      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d100      	bne.n	80017fc <HAL_RCC_OscConfig+0x4ec>
 80017fa:	e097      	b.n	800192c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	220c      	movs	r2, #12
 8001802:	4013      	ands	r3, r2
 8001804:	2b08      	cmp	r3, #8
 8001806:	d100      	bne.n	800180a <HAL_RCC_OscConfig+0x4fa>
 8001808:	e06b      	b.n	80018e2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d14c      	bne.n	80018ac <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001818:	494a      	ldr	r1, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x634>)
 800181a:	400a      	ands	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fa11 	bl	8000c44 <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff fa0c 	bl	8000c44 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e079      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	049b      	lsls	r3, r3, #18
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	220f      	movs	r2, #15
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001856:	430a      	orrs	r2, r1
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a3a      	ldr	r2, [pc, #232]	; (8001948 <HAL_RCC_OscConfig+0x638>)
 8001860:	4013      	ands	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	431a      	orrs	r2, r3
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0449      	lsls	r1, r1, #17
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff f9df 	bl	8000c44 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f9da 	bl	8000c44 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e047      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	049b      	lsls	r3, r3, #18
 80018a6:	4013      	ands	r3, r2
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x57c>
 80018aa:	e03f      	b.n	800192c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018b2:	4924      	ldr	r1, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x634>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff f9c4 	bl	8000c44 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff f9bf 	bl	8000c44 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e02c      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	049b      	lsls	r3, r3, #18
 80018dc:	4013      	ands	r3, r2
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5b2>
 80018e0:	e024      	b.n	800192c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e01f      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	23c0      	movs	r3, #192	; 0xc0
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	429a      	cmp	r2, r3
 8001908:	d10e      	bne.n	8001928 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	220f      	movs	r2, #15
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	23f0      	movs	r3, #240	; 0xf0
 800191c:	039b      	lsls	r3, r3, #14
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b008      	add	sp, #32
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40021000 	.word	0x40021000
 800193c:	00001388 	.word	0x00001388
 8001940:	efffffff 	.word	0xefffffff
 8001944:	feffffff 	.word	0xfeffffff
 8001948:	ffc27fff 	.word	0xffc27fff

0800194c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b3      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d911      	bls.n	8001992 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	4b55      	ldr	r3, [pc, #340]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e09a      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d015      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2204      	movs	r2, #4
 80019a2:	4013      	ands	r3, r2
 80019a4:	d006      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019a6:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019ac:	21e0      	movs	r1, #224	; 0xe0
 80019ae:	00c9      	lsls	r1, r1, #3
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	4393      	bics	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d040      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	029b      	lsls	r3, r3, #10
 80019e2:	4013      	ands	r3, r2
 80019e4:	d114      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06e      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	049b      	lsls	r3, r3, #18
 80019fa:	4013      	ands	r3, r2
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e062      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2202      	movs	r2, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e05b      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a10:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2203      	movs	r2, #3
 8001a16:	4393      	bics	r3, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff f90e 	bl	8000c44 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f7ff f909 	bl	8000c44 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_RCC_ClockConfig+0x18c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e042      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	220c      	movs	r2, #12
 8001a48:	401a      	ands	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1ec      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d211      	bcs.n	8001a86 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4393      	bics	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e020      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_RCC_ClockConfig+0x190>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001aa4:	f000 f820 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa8:	0001      	movs	r1, r0
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x194>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	000a      	movs	r2, r1
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x198>)
 8001abe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f7ff f879 	bl	8000bb8 <HAL_InitTick>
  
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	00001388 	.word	0x00001388
 8001adc:	fffff8ff 	.word	0xfffff8ff
 8001ae0:	08003fe4 	.word	0x08003fe4
 8001ae4:	20000014 	.word	0x20000014

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x30>
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x36>
 8001b16:	e02e      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b1a:	613b      	str	r3, [r7, #16]
      break;
 8001b1c:	e02e      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	220f      	movs	r2, #15
 8001b24:	4013      	ands	r3, r2
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	220f      	movs	r2, #15
 8001b32:	4013      	ands	r3, r2
 8001b34:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	23c0      	movs	r3, #192	; 0xc0
 8001b3e:	025b      	lsls	r3, r3, #9
 8001b40:	401a      	ands	r2, r3
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	480f      	ldr	r0, [pc, #60]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b4e:	f7fe fadb 	bl	8000108 <__udivsi3>
 8001b52:	0003      	movs	r3, r0
 8001b54:	001a      	movs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4353      	muls	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b62:	f7fe fad1 	bl	8000108 <__udivsi3>
 8001b66:	0003      	movs	r3, r0
 8001b68:	001a      	movs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4353      	muls	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	e002      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b78:	613b      	str	r3, [r7, #16]
      break;
 8001b7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b7c:	693b      	ldr	r3, [r7, #16]
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b006      	add	sp, #24
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	01312d00 	.word	0x01312d00
 8001b90:	08003ffc 	.word	0x08003ffc
 8001b94:	0800400c 	.word	0x0800400c
 8001b98:	007a1200 	.word	0x007a1200

08001b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	20000014 	.word	0x20000014

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bb4:	f7ff fff2 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bb8:	0001      	movs	r1, r0
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	40d9      	lsrs	r1, r3
 8001bca:	000b      	movs	r3, r1
}    
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08003ff4 	.word	0x08003ff4

08001bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	025b      	lsls	r3, r3, #9
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bf8:	e08e      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2017      	movs	r0, #23
 8001bfc:	183b      	adds	r3, r7, r0
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b5f      	ldr	r3, [pc, #380]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	055b      	lsls	r3, r3, #21
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d110      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	0549      	lsls	r1, r1, #21
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	61da      	str	r2, [r3, #28]
 8001c1c:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	183b      	adds	r3, r7, r0
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d11a      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3c:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	0049      	lsls	r1, r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe fffb 	bl	8000c44 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	e008      	b.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c54:	f7fe fff6 	bl	8000c44 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e087      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c72:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d034      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	23c0      	movs	r3, #192	; 0xc0
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d02c      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a3b      	ldr	r2, [pc, #236]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ca0:	6a1a      	ldr	r2, [r3, #32]
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0249      	lsls	r1, r1, #9
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cb2:	4936      	ldr	r1, [pc, #216]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe ffbd 	bl	8000c44 <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	e009      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7fe ffb8 	bl	8000c44 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	4a2d      	ldr	r2, [pc, #180]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e048      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d02:	2317      	movs	r3, #23
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d12:	4920      	ldr	r1, [pc, #128]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	2203      	movs	r2, #3
 8001d28:	4393      	bics	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d32:	430a      	orrs	r2, r1
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	2210      	movs	r2, #16
 8001d46:	4393      	bics	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d50:	430a      	orrs	r2, r1
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	029b      	lsls	r3, r3, #10
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	4393      	bics	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b006      	add	sp, #24
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40007000 	.word	0x40007000
 8001d88:	fffffcff 	.word	0xfffffcff
 8001d8c:	fffeffff 	.word	0xfffeffff
 8001d90:	00001388 	.word	0x00001388
 8001d94:	efffffff 	.word	0xefffffff

08001d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0a8      	b.n	8001efc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	2382      	movs	r3, #130	; 0x82
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d009      	beq.n	8001dd2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
 8001dc4:	e005      	b.n	8001dd2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	225d      	movs	r2, #93	; 0x5d
 8001ddc:	5c9b      	ldrb	r3, [r3, r2]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d107      	bne.n	8001df4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	225c      	movs	r2, #92	; 0x5c
 8001de8:	2100      	movs	r1, #0
 8001dea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f7fe fdc0 	bl	8000974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	225d      	movs	r2, #93	; 0x5d
 8001df8:	2102      	movs	r1, #2
 8001dfa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2140      	movs	r1, #64	; 0x40
 8001e08:	438a      	bics	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	23e0      	movs	r3, #224	; 0xe0
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d902      	bls.n	8001e1e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e002      	b.n	8001e24 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	015b      	lsls	r3, r3, #5
 8001e22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	23f0      	movs	r3, #240	; 0xf0
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d008      	beq.n	8001e42 <HAL_SPI_Init+0xaa>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	23e0      	movs	r3, #224	; 0xe0
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d002      	beq.n	8001e42 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	2382      	movs	r3, #130	; 0x82
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	2384      	movs	r3, #132	; 0x84
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	400b      	ands	r3, r1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	400b      	ands	r3, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	2101      	movs	r1, #1
 8001e68:	400b      	ands	r3, r1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6999      	ldr	r1, [r3, #24]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	400b      	ands	r3, r1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2138      	movs	r1, #56	; 0x38
 8001e7e:	400b      	ands	r3, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	400b      	ands	r3, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	0011      	movs	r1, r2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	401a      	ands	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	2110      	movs	r1, #16
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb8:	2108      	movs	r1, #8
 8001eba:	400b      	ands	r3, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68d9      	ldr	r1, [r3, #12]
 8001ec2:	23f0      	movs	r3, #240	; 0xf0
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	0011      	movs	r1, r2
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	015b      	lsls	r3, r3, #5
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4907      	ldr	r1, [pc, #28]	; (8001f04 <HAL_SPI_Init+0x16c>)
 8001ee8:	400a      	ands	r2, r1
 8001eea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	225d      	movs	r2, #93	; 0x5d
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	fffff7ff 	.word	0xfffff7ff

08001f08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	1dbb      	adds	r3, r7, #6
 8001f16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f18:	231f      	movs	r3, #31
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	225c      	movs	r2, #92	; 0x5c
 8001f24:	5c9b      	ldrb	r3, [r3, r2]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_SPI_Transmit+0x26>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e147      	b.n	80021be <HAL_SPI_Transmit+0x2b6>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	225c      	movs	r2, #92	; 0x5c
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f36:	f7fe fe85 	bl	8000c44 <HAL_GetTick>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001f3e:	2316      	movs	r3, #22
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	1dba      	adds	r2, r7, #6
 8001f44:	8812      	ldrh	r2, [r2, #0]
 8001f46:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	225d      	movs	r2, #93	; 0x5d
 8001f4c:	5c9b      	ldrb	r3, [r3, r2]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d004      	beq.n	8001f5e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001f54:	231f      	movs	r3, #31
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2202      	movs	r2, #2
 8001f5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f5c:	e128      	b.n	80021b0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_SPI_Transmit+0x64>
 8001f64:	1dbb      	adds	r3, r7, #6
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d104      	bne.n	8001f76 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001f6c:	231f      	movs	r3, #31
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f74:	e11c      	b.n	80021b0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	225d      	movs	r2, #93	; 0x5d
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1dba      	adds	r2, r7, #6
 8001f8e:	8812      	ldrh	r2, [r2, #0]
 8001f90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1dba      	adds	r2, r7, #6
 8001f96:	8812      	ldrh	r2, [r2, #0]
 8001f98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2244      	movs	r2, #68	; 0x44
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2246      	movs	r2, #70	; 0x46
 8001fac:	2100      	movs	r1, #0
 8001fae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d110      	bne.n	8001fea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	01c9      	lsls	r1, r1, #7
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b40      	cmp	r3, #64	; 0x40
 8001ff6:	d007      	beq.n	8002008 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	23e0      	movs	r3, #224	; 0xe0
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	429a      	cmp	r2, r3
 8002012:	d952      	bls.n	80020ba <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_SPI_Transmit+0x11e>
 800201c:	2316      	movs	r3, #22
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d143      	bne.n	80020ae <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	881a      	ldrh	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	1c9a      	adds	r2, r3, #2
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800204a:	e030      	b.n	80020ae <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d112      	bne.n	8002080 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	881a      	ldrh	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	1c9a      	adds	r2, r3, #2
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800207e:	e016      	b.n	80020ae <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002080:	f7fe fde0 	bl	8000c44 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d802      	bhi.n	8002096 <HAL_SPI_Transmit+0x18e>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	d102      	bne.n	800209c <HAL_SPI_Transmit+0x194>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d108      	bne.n	80020ae <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800209c:	231f      	movs	r3, #31
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2203      	movs	r2, #3
 80020a2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	225d      	movs	r2, #93	; 0x5d
 80020a8:	2101      	movs	r1, #1
 80020aa:	5499      	strb	r1, [r3, r2]
          goto error;
 80020ac:	e080      	b.n	80021b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1c9      	bne.n	800204c <HAL_SPI_Transmit+0x144>
 80020b8:	e053      	b.n	8002162 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d004      	beq.n	80020cc <HAL_SPI_Transmit+0x1c4>
 80020c2:	2316      	movs	r3, #22
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d145      	bne.n	8002158 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	330c      	adds	r3, #12
 80020d6:	7812      	ldrb	r2, [r2, #0]
 80020d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80020f2:	e031      	b.n	8002158 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d113      	bne.n	800212a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	330c      	adds	r3, #12
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002128:	e016      	b.n	8002158 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800212a:	f7fe fd8b 	bl	8000c44 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d802      	bhi.n	8002140 <HAL_SPI_Transmit+0x238>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_SPI_Transmit+0x23e>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d108      	bne.n	8002158 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002146:	231f      	movs	r3, #31
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2203      	movs	r2, #3
 800214c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	225d      	movs	r2, #93	; 0x5d
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]
          goto error;
 8002156:	e02b      	b.n	80021b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1c8      	bne.n	80020f4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 fcef 	bl	8002b4c <SPI_EndRxTxTransaction>
 800216e:	1e03      	subs	r3, r0, #0
 8002170:	d002      	beq.n	8002178 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800219e:	231f      	movs	r3, #31
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e003      	b.n	80021b0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	225d      	movs	r2, #93	; 0x5d
 80021ac:	2101      	movs	r1, #1
 80021ae:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	225c      	movs	r2, #92	; 0x5c
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80021b8:	231f      	movs	r3, #31
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781b      	ldrb	r3, [r3, #0]
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b008      	add	sp, #32
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	1dbb      	adds	r3, r7, #6
 80021d6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021d8:	2117      	movs	r1, #23
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	225d      	movs	r2, #93	; 0x5d
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d003      	beq.n	80021f4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2202      	movs	r2, #2
 80021f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80021f2:	e12b      	b.n	800244c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	2382      	movs	r3, #130	; 0x82
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d113      	bne.n	8002228 <HAL_SPI_Receive+0x60>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10f      	bne.n	8002228 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	225d      	movs	r2, #93	; 0x5d
 800220c:	2104      	movs	r1, #4
 800220e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002210:	1dbb      	adds	r3, r7, #6
 8002212:	881c      	ldrh	r4, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	0023      	movs	r3, r4
 8002220:	f000 f924 	bl	800246c <HAL_SPI_TransmitReceive>
 8002224:	0003      	movs	r3, r0
 8002226:	e118      	b.n	800245a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	225c      	movs	r2, #92	; 0x5c
 800222c:	5c9b      	ldrb	r3, [r3, r2]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_SPI_Receive+0x6e>
 8002232:	2302      	movs	r3, #2
 8002234:	e111      	b.n	800245a <HAL_SPI_Receive+0x292>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	225c      	movs	r2, #92	; 0x5c
 800223a:	2101      	movs	r1, #1
 800223c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800223e:	f7fe fd01 	bl	8000c44 <HAL_GetTick>
 8002242:	0003      	movs	r3, r0
 8002244:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_SPI_Receive+0x8c>
 800224c:	1dbb      	adds	r3, r7, #6
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002254:	2317      	movs	r3, #23
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
    goto error;
 800225c:	e0f6      	b.n	800244c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	225d      	movs	r2, #93	; 0x5d
 8002262:	2104      	movs	r1, #4
 8002264:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1dba      	adds	r2, r7, #6
 8002276:	2144      	movs	r1, #68	; 0x44
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1dba      	adds	r2, r7, #6
 8002280:	2146      	movs	r1, #70	; 0x46
 8002282:	8812      	ldrh	r2, [r2, #0]
 8002284:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	23e0      	movs	r3, #224	; 0xe0
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d908      	bls.n	80022c2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	496a      	ldr	r1, [pc, #424]	; (8002464 <HAL_SPI_Receive+0x29c>)
 80022bc:	400a      	ands	r2, r1
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	e008      	b.n	80022d4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0149      	lsls	r1, r1, #5
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	429a      	cmp	r2, r3
 80022de:	d10f      	bne.n	8002300 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	438a      	bics	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	495b      	ldr	r1, [pc, #364]	; (8002468 <HAL_SPI_Receive+0x2a0>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	4013      	ands	r3, r2
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d007      	beq.n	800231e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	23e0      	movs	r3, #224	; 0xe0
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	429a      	cmp	r2, r3
 8002328:	d900      	bls.n	800232c <HAL_SPI_Receive+0x164>
 800232a:	e071      	b.n	8002410 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800232c:	e035      	b.n	800239a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	2b01      	cmp	r3, #1
 800233a:	d117      	bne.n	800236c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	001a      	movs	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2246      	movs	r2, #70	; 0x46
 800235c:	5a9b      	ldrh	r3, [r3, r2]
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b299      	uxth	r1, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2246      	movs	r2, #70	; 0x46
 8002368:	5299      	strh	r1, [r3, r2]
 800236a:	e016      	b.n	800239a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800236c:	f7fe fc6a 	bl	8000c44 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d802      	bhi.n	8002382 <HAL_SPI_Receive+0x1ba>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_SPI_Receive+0x1c0>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d108      	bne.n	800239a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002388:	2317      	movs	r3, #23
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2203      	movs	r2, #3
 800238e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	225d      	movs	r2, #93	; 0x5d
 8002394:	2101      	movs	r1, #1
 8002396:	5499      	strb	r1, [r3, r2]
          goto error;
 8002398:	e058      	b.n	800244c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2246      	movs	r2, #70	; 0x46
 800239e:	5a9b      	ldrh	r3, [r3, r2]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1c3      	bne.n	800232e <HAL_SPI_Receive+0x166>
 80023a6:	e039      	b.n	800241c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2201      	movs	r2, #1
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d115      	bne.n	80023e2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	b292      	uxth	r2, r2
 80023c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	1c9a      	adds	r2, r3, #2
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2246      	movs	r2, #70	; 0x46
 80023d2:	5a9b      	ldrh	r3, [r3, r2]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b299      	uxth	r1, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2246      	movs	r2, #70	; 0x46
 80023de:	5299      	strh	r1, [r3, r2]
 80023e0:	e016      	b.n	8002410 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e2:	f7fe fc2f 	bl	8000c44 <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d802      	bhi.n	80023f8 <HAL_SPI_Receive+0x230>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	d102      	bne.n	80023fe <HAL_SPI_Receive+0x236>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80023fe:	2317      	movs	r3, #23
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2203      	movs	r2, #3
 8002404:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	225d      	movs	r2, #93	; 0x5d
 800240a:	2101      	movs	r1, #1
 800240c:	5499      	strb	r1, [r3, r2]
          goto error;
 800240e:	e01d      	b.n	800244c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2246      	movs	r2, #70	; 0x46
 8002414:	5a9b      	ldrh	r3, [r3, r2]
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1c5      	bne.n	80023a8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 fb34 	bl	8002a90 <SPI_EndRxTransaction>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d002      	beq.n	8002432 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800243a:	2317      	movs	r3, #23
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e003      	b.n	800244c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	225d      	movs	r2, #93	; 0x5d
 8002448:	2101      	movs	r1, #1
 800244a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	225c      	movs	r2, #92	; 0x5c
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002454:	2317      	movs	r3, #23
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b007      	add	sp, #28
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	ffffefff 	.word	0xffffefff
 8002468:	ffffbfff 	.word	0xffffbfff

0800246c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	001a      	movs	r2, r3
 800247a:	1cbb      	adds	r3, r7, #2
 800247c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800247e:	2301      	movs	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002482:	2323      	movs	r3, #35	; 0x23
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	225c      	movs	r2, #92	; 0x5c
 800248e:	5c9b      	ldrb	r3, [r3, r2]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_SPI_TransmitReceive+0x2c>
 8002494:	2302      	movs	r3, #2
 8002496:	e1c4      	b.n	8002822 <HAL_SPI_TransmitReceive+0x3b6>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	225c      	movs	r2, #92	; 0x5c
 800249c:	2101      	movs	r1, #1
 800249e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024a0:	f7fe fbd0 	bl	8000c44 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024a8:	201b      	movs	r0, #27
 80024aa:	183b      	adds	r3, r7, r0
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	215d      	movs	r1, #93	; 0x5d
 80024b0:	5c52      	ldrb	r2, [r2, r1]
 80024b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80024ba:	2312      	movs	r3, #18
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	1cba      	adds	r2, r7, #2
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024c4:	183b      	adds	r3, r7, r0
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d011      	beq.n	80024f0 <HAL_SPI_TransmitReceive+0x84>
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	2382      	movs	r3, #130	; 0x82
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d107      	bne.n	80024e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_SPI_TransmitReceive+0x7a>
 80024de:	183b      	adds	r3, r7, r0
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d004      	beq.n	80024f0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80024e6:	2323      	movs	r3, #35	; 0x23
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80024ee:	e191      	b.n	8002814 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x98>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x98>
 80024fc:	1cbb      	adds	r3, r7, #2
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002504:	2323      	movs	r3, #35	; 0x23
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
    goto error;
 800250c:	e182      	b.n	8002814 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	225d      	movs	r2, #93	; 0x5d
 8002512:	5c9b      	ldrb	r3, [r3, r2]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b04      	cmp	r3, #4
 8002518:	d003      	beq.n	8002522 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	225d      	movs	r2, #93	; 0x5d
 800251e:	2105      	movs	r1, #5
 8002520:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1cba      	adds	r2, r7, #2
 8002532:	2146      	movs	r1, #70	; 0x46
 8002534:	8812      	ldrh	r2, [r2, #0]
 8002536:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1cba      	adds	r2, r7, #2
 800253c:	2144      	movs	r1, #68	; 0x44
 800253e:	8812      	ldrh	r2, [r2, #0]
 8002540:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1cba      	adds	r2, r7, #2
 800254c:	8812      	ldrh	r2, [r2, #0]
 800254e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1cba      	adds	r2, r7, #2
 8002554:	8812      	ldrh	r2, [r2, #0]
 8002556:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	23e0      	movs	r3, #224	; 0xe0
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	429a      	cmp	r2, r3
 800256e:	d908      	bls.n	8002582 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	49ac      	ldr	r1, [pc, #688]	; (800282c <HAL_SPI_TransmitReceive+0x3c0>)
 800257c:	400a      	ands	r2, r1
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	e008      	b.n	8002594 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	0149      	lsls	r1, r1, #5
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	4013      	ands	r3, r2
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	d007      	beq.n	80025b2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2140      	movs	r1, #64	; 0x40
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	23e0      	movs	r3, #224	; 0xe0
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d800      	bhi.n	80025c0 <HAL_SPI_TransmitReceive+0x154>
 80025be:	e083      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x168>
 80025c8:	2312      	movs	r3, #18
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d000      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x168>
 80025d2:	e06d      	b.n	80026b0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	881a      	ldrh	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	1c9a      	adds	r2, r3, #2
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f8:	e05a      	b.n	80026b0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	2b02      	cmp	r3, #2
 8002606:	d11b      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x1d4>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x1d4>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	2b01      	cmp	r3, #1
 8002616:	d113      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261c:	881a      	ldrh	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	1c9a      	adds	r2, r3, #2
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2201      	movs	r2, #1
 8002648:	4013      	ands	r3, r2
 800264a:	2b01      	cmp	r3, #1
 800264c:	d11c      	bne.n	8002688 <HAL_SPI_TransmitReceive+0x21c>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2246      	movs	r2, #70	; 0x46
 8002652:	5a9b      	ldrh	r3, [r3, r2]
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	b292      	uxth	r2, r2
 8002666:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2246      	movs	r2, #70	; 0x46
 8002676:	5a9b      	ldrh	r3, [r3, r2]
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b299      	uxth	r1, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2246      	movs	r2, #70	; 0x46
 8002682:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002684:	2301      	movs	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002688:	f7fe fadc 	bl	8000c44 <HAL_GetTick>
 800268c:	0002      	movs	r2, r0
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002694:	429a      	cmp	r2, r3
 8002696:	d80b      	bhi.n	80026b0 <HAL_SPI_TransmitReceive+0x244>
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	3301      	adds	r3, #1
 800269c:	d008      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800269e:	2323      	movs	r3, #35	; 0x23
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2203      	movs	r2, #3
 80026a4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	225d      	movs	r2, #93	; 0x5d
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]
        goto error;
 80026ae:	e0b1      	b.n	8002814 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d19f      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x18e>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2246      	movs	r2, #70	; 0x46
 80026be:	5a9b      	ldrh	r3, [r3, r2]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d199      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x18e>
 80026c6:	e089      	b.n	80027dc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x270>
 80026d0:	2312      	movs	r3, #18
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d000      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x270>
 80026da:	e074      	b.n	80027c6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	330c      	adds	r3, #12
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002702:	e060      	b.n	80027c6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d11c      	bne.n	800274c <HAL_SPI_TransmitReceive+0x2e0>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <HAL_SPI_TransmitReceive+0x2e0>
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	2b01      	cmp	r3, #1
 8002720:	d114      	bne.n	800274c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2201      	movs	r2, #1
 8002754:	4013      	ands	r3, r2
 8002756:	2b01      	cmp	r3, #1
 8002758:	d11e      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x32c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2246      	movs	r2, #70	; 0x46
 800275e:	5a9b      	ldrh	r3, [r3, r2]
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d018      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	001a      	movs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2246      	movs	r2, #70	; 0x46
 8002786:	5a9b      	ldrh	r3, [r3, r2]
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b299      	uxth	r1, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2246      	movs	r2, #70	; 0x46
 8002792:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002794:	2301      	movs	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002798:	f7fe fa54 	bl	8000c44 <HAL_GetTick>
 800279c:	0002      	movs	r2, r0
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d802      	bhi.n	80027ae <HAL_SPI_TransmitReceive+0x342>
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	3301      	adds	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x348>
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d108      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80027b4:	2323      	movs	r3, #35	; 0x23
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2203      	movs	r2, #3
 80027ba:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	225d      	movs	r2, #93	; 0x5d
 80027c0:	2101      	movs	r1, #1
 80027c2:	5499      	strb	r1, [r3, r2]
        goto error;
 80027c4:	e026      	b.n	8002814 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d199      	bne.n	8002704 <HAL_SPI_TransmitReceive+0x298>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2246      	movs	r2, #70	; 0x46
 80027d4:	5a9b      	ldrh	r3, [r3, r2]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d193      	bne.n	8002704 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f9b2 	bl	8002b4c <SPI_EndRxTxTransaction>
 80027e8:	1e03      	subs	r3, r0, #0
 80027ea:	d006      	beq.n	80027fa <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80027ec:	2323      	movs	r3, #35	; 0x23
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002802:	2323      	movs	r3, #35	; 0x23
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	e003      	b.n	8002814 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	225d      	movs	r2, #93	; 0x5d
 8002810:	2101      	movs	r1, #1
 8002812:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	225c      	movs	r2, #92	; 0x5c
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800281c:	2323      	movs	r3, #35	; 0x23
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b00a      	add	sp, #40	; 0x28
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	ffffefff 	.word	0xffffefff

08002830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002840:	f7fe fa00 	bl	8000c44 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	18d3      	adds	r3, r2, r3
 800284e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002850:	f7fe f9f8 	bl	8000c44 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002858:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	015b      	lsls	r3, r3, #5
 800285e:	0d1b      	lsrs	r3, r3, #20
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	4353      	muls	r3, r2
 8002864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002866:	e058      	b.n	800291a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	d055      	beq.n	800291a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800286e:	f7fe f9e9 	bl	8000c44 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	429a      	cmp	r2, r3
 800287c:	d902      	bls.n	8002884 <SPI_WaitFlagStateUntilTimeout+0x54>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d142      	bne.n	800290a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	21e0      	movs	r1, #224	; 0xe0
 8002890:	438a      	bics	r2, r1
 8002892:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	2382      	movs	r3, #130	; 0x82
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	429a      	cmp	r2, r3
 800289e:	d113      	bne.n	80028c8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d005      	beq.n	80028b8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d107      	bne.n	80028c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	438a      	bics	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d110      	bne.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	491a      	ldr	r1, [pc, #104]	; (8002948 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	0189      	lsls	r1, r1, #6
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	225d      	movs	r2, #93	; 0x5d
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	225c      	movs	r2, #92	; 0x5c
 8002902:	2100      	movs	r1, #0
 8002904:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e017      	b.n	800293a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3b01      	subs	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	4013      	ands	r3, r2
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	425a      	negs	r2, r3
 800292a:	4153      	adcs	r3, r2
 800292c:	b2db      	uxtb	r3, r3
 800292e:	001a      	movs	r2, r3
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d197      	bne.n	8002868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b008      	add	sp, #32
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	20000014 	.word	0x20000014
 8002948:	ffffdfff 	.word	0xffffdfff

0800294c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800295a:	2317      	movs	r3, #23
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002962:	f7fe f96f 	bl	8000c44 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	18d3      	adds	r3, r2, r3
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002972:	f7fe f967 	bl	8000c44 <HAL_GetTick>
 8002976:	0003      	movs	r3, r0
 8002978:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	0013      	movs	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	189b      	adds	r3, r3, r2
 800298c:	00da      	lsls	r2, r3, #3
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	0d1b      	lsrs	r3, r3, #20
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	4353      	muls	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002998:	e068      	b.n	8002a6c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	23c0      	movs	r3, #192	; 0xc0
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d10a      	bne.n	80029ba <SPI_WaitFifoStateUntilTimeout+0x6e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d107      	bne.n	80029ba <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	2117      	movs	r1, #23
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	d055      	beq.n	8002a6c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029c0:	f7fe f940 	bl	8000c44 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d902      	bls.n	80029d6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d142      	bne.n	8002a5c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	21e0      	movs	r1, #224	; 0xe0
 80029e2:	438a      	bics	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	2382      	movs	r3, #130	; 0x82
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d113      	bne.n	8002a1a <SPI_WaitFifoStateUntilTimeout+0xce>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d005      	beq.n	8002a0a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d107      	bne.n	8002a1a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	438a      	bics	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d110      	bne.n	8002a48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4916      	ldr	r1, [pc, #88]	; (8002a8c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	0189      	lsls	r1, r1, #6
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	225d      	movs	r2, #93	; 0x5d
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	225c      	movs	r2, #92	; 0x5c
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e010      	b.n	8002a7e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d18e      	bne.n	800299a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b00a      	add	sp, #40	; 0x28
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	20000014 	.word	0x20000014
 8002a8c:	ffffdfff 	.word	0xffffdfff

08002a90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	2382      	movs	r3, #130	; 0x82
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d113      	bne.n	8002ad0 <SPI_EndRxTransaction+0x40>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d005      	beq.n	8002ac0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2140      	movs	r1, #64	; 0x40
 8002acc:	438a      	bics	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	0013      	movs	r3, r2
 8002ada:	2200      	movs	r2, #0
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	f7ff fea7 	bl	8002830 <SPI_WaitFlagStateUntilTimeout>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d007      	beq.n	8002af6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aea:	2220      	movs	r2, #32
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e026      	b.n	8002b44 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	2382      	movs	r3, #130	; 0x82
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d11f      	bne.n	8002b42 <SPI_EndRxTransaction+0xb2>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d005      	beq.n	8002b1a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d113      	bne.n	8002b42 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	23c0      	movs	r3, #192	; 0xc0
 8002b1e:	00d9      	lsls	r1, r3, #3
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	0013      	movs	r3, r2
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f7ff ff0f 	bl	800294c <SPI_WaitFifoStateUntilTimeout>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d007      	beq.n	8002b42 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	2220      	movs	r2, #32
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e000      	b.n	8002b44 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	23c0      	movs	r3, #192	; 0xc0
 8002b5c:	0159      	lsls	r1, r3, #5
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	0013      	movs	r3, r2
 8002b66:	2200      	movs	r2, #0
 8002b68:	f7ff fef0 	bl	800294c <SPI_WaitFifoStateUntilTimeout>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d007      	beq.n	8002b80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b74:	2220      	movs	r2, #32
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e027      	b.n	8002bd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	0013      	movs	r3, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	f7ff fe4f 	bl	8002830 <SPI_WaitFlagStateUntilTimeout>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d007      	beq.n	8002ba6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e014      	b.n	8002bd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	23c0      	movs	r3, #192	; 0xc0
 8002baa:	00d9      	lsls	r1, r3, #3
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f7ff fec9 	bl	800294c <SPI_WaitFifoStateUntilTimeout>
 8002bba:	1e03      	subs	r3, r0, #0
 8002bbc:	d007      	beq.n	8002bce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e000      	b.n	8002bd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b004      	add	sp, #16
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e044      	b.n	8002c74 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d107      	bne.n	8002c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2278      	movs	r2, #120	; 0x78
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fd ff05 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2101      	movs	r1, #1
 8002c14:	438a      	bics	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 fb74 	bl	8003308 <UART_SetConfig>
 8002c20:	0003      	movs	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e024      	b.n	8002c74 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 fca7 	bl	8003588 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	490d      	ldr	r1, [pc, #52]	; (8002c7c <HAL_UART_Init+0xa4>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2108      	movs	r1, #8
 8002c56:	438a      	bics	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 fd3f 	bl	80036f0 <UART_CheckIdleState>
 8002c72:	0003      	movs	r3, r0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffff7ff 	.word	0xfffff7ff

08002c80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	1dbb      	adds	r3, r7, #6
 8002c8c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	589b      	ldr	r3, [r3, r2]
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d145      	bne.n	8002d24 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_UART_Receive_IT+0x26>
 8002c9e:	1dbb      	adds	r3, r7, #6
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e03d      	b.n	8002d26 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	015b      	lsls	r3, r3, #5
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d109      	bne.n	8002cca <HAL_UART_Receive_IT+0x4a>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d001      	beq.n	8002cca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e02d      	b.n	8002d26 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d019      	beq.n	8002d12 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cde:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce2:	613b      	str	r3, [r7, #16]
  return(result);
 8002ce4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	2301      	movs	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f383 8810 	msr	PRIMASK, r3
}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	04c9      	lsls	r1, r1, #19
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f383 8810 	msr	PRIMASK, r3
}
 8002d10:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d12:	1dbb      	adds	r3, r7, #6
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 fdfa 	bl	8003914 <UART_Start_Receive_IT>
 8002d20:	0003      	movs	r3, r0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b008      	add	sp, #32
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b0ab      	sub	sp, #172	; 0xac
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	22a4      	movs	r2, #164	; 0xa4
 8002d40:	18b9      	adds	r1, r7, r2
 8002d42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	20a0      	movs	r0, #160	; 0xa0
 8002d4c:	1839      	adds	r1, r7, r0
 8002d4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	219c      	movs	r1, #156	; 0x9c
 8002d58:	1879      	adds	r1, r7, r1
 8002d5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d5c:	0011      	movs	r1, r2
 8002d5e:	18bb      	adds	r3, r7, r2
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a99      	ldr	r2, [pc, #612]	; (8002fc8 <HAL_UART_IRQHandler+0x298>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	2298      	movs	r2, #152	; 0x98
 8002d68:	18bc      	adds	r4, r7, r2
 8002d6a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002d6c:	18bb      	adds	r3, r7, r2
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d114      	bne.n	8002d9e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d00f      	beq.n	8002d9e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2220      	movs	r2, #32
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00a      	beq.n	8002d9e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d100      	bne.n	8002d92 <HAL_UART_IRQHandler+0x62>
 8002d90:	e286      	b.n	80032a0 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	0010      	movs	r0, r2
 8002d9a:	4798      	blx	r3
      }
      return;
 8002d9c:	e280      	b.n	80032a0 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d9e:	2398      	movs	r3, #152	; 0x98
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d100      	bne.n	8002daa <HAL_UART_IRQHandler+0x7a>
 8002da8:	e114      	b.n	8002fd4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002daa:	239c      	movs	r3, #156	; 0x9c
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2201      	movs	r2, #1
 8002db2:	4013      	ands	r3, r2
 8002db4:	d106      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002db6:	23a0      	movs	r3, #160	; 0xa0
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a83      	ldr	r2, [pc, #524]	; (8002fcc <HAL_UART_IRQHandler+0x29c>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d100      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x94>
 8002dc2:	e107      	b.n	8002fd4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dc4:	23a4      	movs	r3, #164	; 0xa4
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d012      	beq.n	8002df6 <HAL_UART_IRQHandler+0xc6>
 8002dd0:	23a0      	movs	r3, #160	; 0xa0
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2201      	movs	r2, #1
 8002de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2284      	movs	r2, #132	; 0x84
 8002dea:	589b      	ldr	r3, [r3, r2]
 8002dec:	2201      	movs	r2, #1
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2184      	movs	r1, #132	; 0x84
 8002df4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df6:	23a4      	movs	r3, #164	; 0xa4
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d011      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
 8002e02:	239c      	movs	r3, #156	; 0x9c
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2202      	movs	r2, #2
 8002e14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2284      	movs	r2, #132	; 0x84
 8002e1a:	589b      	ldr	r3, [r3, r2]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2184      	movs	r1, #132	; 0x84
 8002e24:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e26:	23a4      	movs	r3, #164	; 0xa4
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d011      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
 8002e32:	239c      	movs	r3, #156	; 0x9c
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2204      	movs	r2, #4
 8002e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2284      	movs	r2, #132	; 0x84
 8002e4a:	589b      	ldr	r3, [r3, r2]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2184      	movs	r1, #132	; 0x84
 8002e54:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e56:	23a4      	movs	r3, #164	; 0xa4
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d017      	beq.n	8002e92 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e62:	23a0      	movs	r3, #160	; 0xa0
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d105      	bne.n	8002e7a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e6e:	239c      	movs	r3, #156	; 0x9c
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e78:	d00b      	beq.n	8002e92 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2208      	movs	r2, #8
 8002e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2284      	movs	r2, #132	; 0x84
 8002e86:	589b      	ldr	r3, [r3, r2]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2184      	movs	r1, #132	; 0x84
 8002e90:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e92:	23a4      	movs	r3, #164	; 0xa4
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d013      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x198>
 8002ea0:	23a0      	movs	r3, #160	; 0xa0
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	04db      	lsls	r3, r3, #19
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d00c      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2284      	movs	r2, #132	; 0x84
 8002ebc:	589b      	ldr	r3, [r3, r2]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2184      	movs	r1, #132	; 0x84
 8002ec6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2284      	movs	r2, #132	; 0x84
 8002ecc:	589b      	ldr	r3, [r3, r2]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d100      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x1a4>
 8002ed2:	e1e7      	b.n	80032a4 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ed4:	23a4      	movs	r3, #164	; 0xa4
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2220      	movs	r2, #32
 8002edc:	4013      	ands	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ee0:	23a0      	movs	r3, #160	; 0xa0
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d008      	beq.n	8002efe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	0010      	movs	r0, r2
 8002efc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2284      	movs	r2, #132	; 0x84
 8002f02:	589b      	ldr	r3, [r3, r2]
 8002f04:	2194      	movs	r1, #148	; 0x94
 8002f06:	187a      	adds	r2, r7, r1
 8002f08:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2240      	movs	r2, #64	; 0x40
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d004      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2228      	movs	r2, #40	; 0x28
 8002f1e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f20:	d047      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 fdbf 	bl	8003aa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2240      	movs	r2, #64	; 0x40
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b40      	cmp	r3, #64	; 0x40
 8002f36:	d137      	bne.n	8002fa8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f38:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f40:	2090      	movs	r0, #144	; 0x90
 8002f42:	183a      	adds	r2, r7, r0
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	2301      	movs	r3, #1
 8002f48:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f4c:	f383 8810 	msr	PRIMASK, r3
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	438a      	bics	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	183b      	adds	r3, r7, r0
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f6a:	f383 8810 	msr	PRIMASK, r3
}
 8002f6e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d012      	beq.n	8002f9e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <HAL_UART_IRQHandler+0x2a0>)
 8002f7e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd ffb7 	bl	8000ef8 <HAL_DMA_Abort_IT>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d01a      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f98:	0018      	movs	r0, r3
 8002f9a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	e012      	b.n	8002fc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f99d 	bl	80032e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa6:	e00d      	b.n	8002fc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f998 	bl	80032e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	e008      	b.n	8002fc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 f993 	bl	80032e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2284      	movs	r2, #132	; 0x84
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002fc2:	e16f      	b.n	80032a4 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc4:	46c0      	nop			; (mov r8, r8)
    return;
 8002fc6:	e16d      	b.n	80032a4 <HAL_UART_IRQHandler+0x574>
 8002fc8:	0000080f 	.word	0x0000080f
 8002fcc:	04000120 	.word	0x04000120
 8002fd0:	08003b71 	.word	0x08003b71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d000      	beq.n	8002fde <HAL_UART_IRQHandler+0x2ae>
 8002fdc:	e139      	b.n	8003252 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fde:	23a4      	movs	r3, #164	; 0xa4
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d100      	bne.n	8002fec <HAL_UART_IRQHandler+0x2bc>
 8002fea:	e132      	b.n	8003252 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fec:	23a0      	movs	r3, #160	; 0xa0
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2210      	movs	r2, #16
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <HAL_UART_IRQHandler+0x2ca>
 8002ff8:	e12b      	b.n	8003252 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2210      	movs	r2, #16
 8003000:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2240      	movs	r2, #64	; 0x40
 800300a:	4013      	ands	r3, r2
 800300c:	2b40      	cmp	r3, #64	; 0x40
 800300e:	d000      	beq.n	8003012 <HAL_UART_IRQHandler+0x2e2>
 8003010:	e09f      	b.n	8003152 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	217e      	movs	r1, #126	; 0x7e
 800301c:	187b      	adds	r3, r7, r1
 800301e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003020:	187b      	adds	r3, r7, r1
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d100      	bne.n	800302a <HAL_UART_IRQHandler+0x2fa>
 8003028:	e13e      	b.n	80032a8 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2258      	movs	r2, #88	; 0x58
 800302e:	5a9b      	ldrh	r3, [r3, r2]
 8003030:	187a      	adds	r2, r7, r1
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d300      	bcc.n	800303a <HAL_UART_IRQHandler+0x30a>
 8003038:	e136      	b.n	80032a8 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	187a      	adds	r2, r7, r1
 800303e:	215a      	movs	r1, #90	; 0x5a
 8003040:	8812      	ldrh	r2, [r2, #0]
 8003042:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b20      	cmp	r3, #32
 800304c:	d06f      	beq.n	800312e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304e:	f3ef 8310 	mrs	r3, PRIMASK
 8003052:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003056:	67bb      	str	r3, [r7, #120]	; 0x78
 8003058:	2301      	movs	r3, #1
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	f383 8810 	msr	PRIMASK, r3
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4992      	ldr	r1, [pc, #584]	; (80032b8 <HAL_UART_IRQHandler+0x588>)
 8003070:	400a      	ands	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003076:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	f383 8810 	msr	PRIMASK, r3
}
 800307e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003080:	f3ef 8310 	mrs	r3, PRIMASK
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003088:	677b      	str	r3, [r7, #116]	; 0x74
 800308a:	2301      	movs	r3, #1
 800308c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003090:	f383 8810 	msr	PRIMASK, r3
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	438a      	bics	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ac:	f383 8810 	msr	PRIMASK, r3
}
 80030b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b2:	f3ef 8310 	mrs	r3, PRIMASK
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80030b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	673b      	str	r3, [r7, #112]	; 0x70
 80030bc:	2301      	movs	r3, #1
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c2:	f383 8810 	msr	PRIMASK, r3
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2140      	movs	r1, #64	; 0x40
 80030d4:	438a      	bics	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030da:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	2120      	movs	r1, #32
 80030ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f2:	f3ef 8310 	mrs	r3, PRIMASK
 80030f6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80030f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030fc:	2301      	movs	r3, #1
 80030fe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003102:	f383 8810 	msr	PRIMASK, r3
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2110      	movs	r1, #16
 8003114:	438a      	bics	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003128:	0018      	movs	r0, r3
 800312a:	f7fd fead 	bl	8000e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2258      	movs	r2, #88	; 0x58
 8003138:	5a9a      	ldrh	r2, [r3, r2]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	215a      	movs	r1, #90	; 0x5a
 800313e:	5a5b      	ldrh	r3, [r3, r1]
 8003140:	b29b      	uxth	r3, r3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f000 f8d0 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003150:	e0aa      	b.n	80032a8 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2258      	movs	r2, #88	; 0x58
 8003156:	5a99      	ldrh	r1, [r3, r2]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	225a      	movs	r2, #90	; 0x5a
 800315c:	5a9b      	ldrh	r3, [r3, r2]
 800315e:	b29a      	uxth	r2, r3
 8003160:	208e      	movs	r0, #142	; 0x8e
 8003162:	183b      	adds	r3, r7, r0
 8003164:	1a8a      	subs	r2, r1, r2
 8003166:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	225a      	movs	r2, #90	; 0x5a
 800316c:	5a9b      	ldrh	r3, [r3, r2]
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d100      	bne.n	8003176 <HAL_UART_IRQHandler+0x446>
 8003174:	e09a      	b.n	80032ac <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8003176:	183b      	adds	r3, r7, r0
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d100      	bne.n	8003180 <HAL_UART_IRQHandler+0x450>
 800317e:	e095      	b.n	80032ac <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003180:	f3ef 8310 	mrs	r3, PRIMASK
 8003184:	60fb      	str	r3, [r7, #12]
  return(result);
 8003186:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003188:	2488      	movs	r4, #136	; 0x88
 800318a:	193a      	adds	r2, r7, r4
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	2301      	movs	r3, #1
 8003190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4945      	ldr	r1, [pc, #276]	; (80032bc <HAL_UART_IRQHandler+0x58c>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b8:	f3ef 8310 	mrs	r3, PRIMASK
 80031bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80031be:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c0:	2484      	movs	r4, #132	; 0x84
 80031c2:	193a      	adds	r2, r7, r4
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f383 8810 	msr	PRIMASK, r3
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	438a      	bics	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	f383 8810 	msr	PRIMASK, r3
}
 80031ee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	2120      	movs	r1, #32
 80031f6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003204:	f3ef 8310 	mrs	r3, PRIMASK
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320c:	2480      	movs	r4, #128	; 0x80
 800320e:	193a      	adds	r2, r7, r4
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	2301      	movs	r3, #1
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2110      	movs	r1, #16
 800322a:	438a      	bics	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	193b      	adds	r3, r7, r4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	f383 8810 	msr	PRIMASK, r3
}
 800323a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003242:	183b      	adds	r3, r7, r0
 8003244:	881a      	ldrh	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0011      	movs	r1, r2
 800324a:	0018      	movs	r0, r3
 800324c:	f000 f850 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003250:	e02c      	b.n	80032ac <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003252:	23a4      	movs	r3, #164	; 0xa4
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	4013      	ands	r3, r2
 800325c:	d00f      	beq.n	800327e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800325e:	23a0      	movs	r3, #160	; 0xa0
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	4013      	ands	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01e      	beq.n	80032b0 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	0010      	movs	r0, r2
 800327a:	4798      	blx	r3
    }
    return;
 800327c:	e018      	b.n	80032b0 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800327e:	23a4      	movs	r3, #164	; 0xa4
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2240      	movs	r2, #64	; 0x40
 8003286:	4013      	ands	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_UART_IRQHandler+0x582>
 800328a:	23a0      	movs	r3, #160	; 0xa0
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2240      	movs	r2, #64	; 0x40
 8003292:	4013      	ands	r3, r2
 8003294:	d00d      	beq.n	80032b2 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0018      	movs	r0, r3
 800329a:	f000 fc80 	bl	8003b9e <UART_EndTransmit_IT>
    return;
 800329e:	e008      	b.n	80032b2 <HAL_UART_IRQHandler+0x582>
      return;
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	e006      	b.n	80032b2 <HAL_UART_IRQHandler+0x582>
    return;
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	e004      	b.n	80032b2 <HAL_UART_IRQHandler+0x582>
      return;
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	e002      	b.n	80032b2 <HAL_UART_IRQHandler+0x582>
      return;
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	e000      	b.n	80032b2 <HAL_UART_IRQHandler+0x582>
    return;
 80032b0:	46c0      	nop			; (mov r8, r8)
  }

}
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b02b      	add	sp, #172	; 0xac
 80032b6:	bd90      	pop	{r4, r7, pc}
 80032b8:	fffffeff 	.word	0xfffffeff
 80032bc:	fffffedf 	.word	0xfffffedf

080032c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	000a      	movs	r2, r1
 80032fa:	1cbb      	adds	r3, r7, #2
 80032fc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b002      	add	sp, #8
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003310:	231e      	movs	r3, #30
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a8d      	ldr	r2, [pc, #564]	; (800356c <UART_SetConfig+0x264>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a88      	ldr	r2, [pc, #544]	; (8003570 <UART_SetConfig+0x268>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4a7f      	ldr	r2, [pc, #508]	; (8003574 <UART_SetConfig+0x26c>)
 8003376:	4013      	ands	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a7b      	ldr	r2, [pc, #492]	; (8003578 <UART_SetConfig+0x270>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d127      	bne.n	80033de <UART_SetConfig+0xd6>
 800338e:	4b7b      	ldr	r3, [pc, #492]	; (800357c <UART_SetConfig+0x274>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	2203      	movs	r2, #3
 8003394:	4013      	ands	r3, r2
 8003396:	2b03      	cmp	r3, #3
 8003398:	d00d      	beq.n	80033b6 <UART_SetConfig+0xae>
 800339a:	d81b      	bhi.n	80033d4 <UART_SetConfig+0xcc>
 800339c:	2b02      	cmp	r3, #2
 800339e:	d014      	beq.n	80033ca <UART_SetConfig+0xc2>
 80033a0:	d818      	bhi.n	80033d4 <UART_SetConfig+0xcc>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <UART_SetConfig+0xa4>
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d00a      	beq.n	80033c0 <UART_SetConfig+0xb8>
 80033aa:	e013      	b.n	80033d4 <UART_SetConfig+0xcc>
 80033ac:	231f      	movs	r3, #31
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e021      	b.n	80033fa <UART_SetConfig+0xf2>
 80033b6:	231f      	movs	r3, #31
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e01c      	b.n	80033fa <UART_SetConfig+0xf2>
 80033c0:	231f      	movs	r3, #31
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2204      	movs	r2, #4
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e017      	b.n	80033fa <UART_SetConfig+0xf2>
 80033ca:	231f      	movs	r3, #31
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	2208      	movs	r2, #8
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e012      	b.n	80033fa <UART_SetConfig+0xf2>
 80033d4:	231f      	movs	r3, #31
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2210      	movs	r2, #16
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e00d      	b.n	80033fa <UART_SetConfig+0xf2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a67      	ldr	r2, [pc, #412]	; (8003580 <UART_SetConfig+0x278>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d104      	bne.n	80033f2 <UART_SetConfig+0xea>
 80033e8:	231f      	movs	r3, #31
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e003      	b.n	80033fa <UART_SetConfig+0xf2>
 80033f2:	231f      	movs	r3, #31
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	2210      	movs	r2, #16
 80033f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	429a      	cmp	r2, r3
 8003404:	d15c      	bne.n	80034c0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003406:	231f      	movs	r3, #31
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b08      	cmp	r3, #8
 800340e:	d015      	beq.n	800343c <UART_SetConfig+0x134>
 8003410:	dc18      	bgt.n	8003444 <UART_SetConfig+0x13c>
 8003412:	2b04      	cmp	r3, #4
 8003414:	d00d      	beq.n	8003432 <UART_SetConfig+0x12a>
 8003416:	dc15      	bgt.n	8003444 <UART_SetConfig+0x13c>
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <UART_SetConfig+0x11a>
 800341c:	2b02      	cmp	r3, #2
 800341e:	d005      	beq.n	800342c <UART_SetConfig+0x124>
 8003420:	e010      	b.n	8003444 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003422:	f7fe fbc5 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8003426:	0003      	movs	r3, r0
 8003428:	61bb      	str	r3, [r7, #24]
        break;
 800342a:	e012      	b.n	8003452 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800342c:	4b55      	ldr	r3, [pc, #340]	; (8003584 <UART_SetConfig+0x27c>)
 800342e:	61bb      	str	r3, [r7, #24]
        break;
 8003430:	e00f      	b.n	8003452 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003432:	f7fe fb59 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8003436:	0003      	movs	r3, r0
 8003438:	61bb      	str	r3, [r7, #24]
        break;
 800343a:	e00a      	b.n	8003452 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	61bb      	str	r3, [r7, #24]
        break;
 8003442:	e006      	b.n	8003452 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003448:	231e      	movs	r3, #30
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
        break;
 8003450:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d100      	bne.n	800345a <UART_SetConfig+0x152>
 8003458:	e07a      	b.n	8003550 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	005a      	lsls	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	18d2      	adds	r2, r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	0019      	movs	r1, r3
 800346c:	0010      	movs	r0, r2
 800346e:	f7fc fe4b 	bl	8000108 <__udivsi3>
 8003472:	0003      	movs	r3, r0
 8003474:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b0f      	cmp	r3, #15
 800347a:	d91c      	bls.n	80034b6 <UART_SetConfig+0x1ae>
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	025b      	lsls	r3, r3, #9
 8003482:	429a      	cmp	r2, r3
 8003484:	d217      	bcs.n	80034b6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	b29a      	uxth	r2, r3
 800348a:	200e      	movs	r0, #14
 800348c:	183b      	adds	r3, r7, r0
 800348e:	210f      	movs	r1, #15
 8003490:	438a      	bics	r2, r1
 8003492:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	2207      	movs	r2, #7
 800349c:	4013      	ands	r3, r2
 800349e:	b299      	uxth	r1, r3
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	183a      	adds	r2, r7, r0
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	183a      	adds	r2, r7, r0
 80034b0:	8812      	ldrh	r2, [r2, #0]
 80034b2:	60da      	str	r2, [r3, #12]
 80034b4:	e04c      	b.n	8003550 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80034b6:	231e      	movs	r3, #30
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e047      	b.n	8003550 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034c0:	231f      	movs	r3, #31
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d015      	beq.n	80034f6 <UART_SetConfig+0x1ee>
 80034ca:	dc18      	bgt.n	80034fe <UART_SetConfig+0x1f6>
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d00d      	beq.n	80034ec <UART_SetConfig+0x1e4>
 80034d0:	dc15      	bgt.n	80034fe <UART_SetConfig+0x1f6>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <UART_SetConfig+0x1d4>
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d005      	beq.n	80034e6 <UART_SetConfig+0x1de>
 80034da:	e010      	b.n	80034fe <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034dc:	f7fe fb68 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 80034e0:	0003      	movs	r3, r0
 80034e2:	61bb      	str	r3, [r7, #24]
        break;
 80034e4:	e012      	b.n	800350c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e6:	4b27      	ldr	r3, [pc, #156]	; (8003584 <UART_SetConfig+0x27c>)
 80034e8:	61bb      	str	r3, [r7, #24]
        break;
 80034ea:	e00f      	b.n	800350c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ec:	f7fe fafc 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 80034f0:	0003      	movs	r3, r0
 80034f2:	61bb      	str	r3, [r7, #24]
        break;
 80034f4:	e00a      	b.n	800350c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	61bb      	str	r3, [r7, #24]
        break;
 80034fc:	e006      	b.n	800350c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003502:	231e      	movs	r3, #30
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
        break;
 800350a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01e      	beq.n	8003550 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	085a      	lsrs	r2, r3, #1
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	18d2      	adds	r2, r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	0019      	movs	r1, r3
 8003522:	0010      	movs	r0, r2
 8003524:	f7fc fdf0 	bl	8000108 <__udivsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	d90a      	bls.n	8003548 <UART_SetConfig+0x240>
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	025b      	lsls	r3, r3, #9
 8003538:	429a      	cmp	r2, r3
 800353a:	d205      	bcs.n	8003548 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	e003      	b.n	8003550 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003548:	231e      	movs	r3, #30
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800355c:	231e      	movs	r3, #30
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	781b      	ldrb	r3, [r3, #0]
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b008      	add	sp, #32
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	efff69f3 	.word	0xefff69f3
 8003570:	ffffcfff 	.word	0xffffcfff
 8003574:	fffff4ff 	.word	0xfffff4ff
 8003578:	40013800 	.word	0x40013800
 800357c:	40021000 	.word	0x40021000
 8003580:	40004400 	.word	0x40004400
 8003584:	007a1200 	.word	0x007a1200

08003588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d00b      	beq.n	80035b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <UART_AdvFeatureConfig+0x144>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4a43      	ldr	r2, [pc, #268]	; (80036d0 <UART_AdvFeatureConfig+0x148>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	0019      	movs	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	d00b      	beq.n	80035f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <UART_AdvFeatureConfig+0x14c>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2208      	movs	r2, #8
 80035fc:	4013      	ands	r3, r2
 80035fe:	d00b      	beq.n	8003618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <UART_AdvFeatureConfig+0x150>)
 8003608:	4013      	ands	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	2210      	movs	r2, #16
 800361e:	4013      	ands	r3, r2
 8003620:	d00b      	beq.n	800363a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <UART_AdvFeatureConfig+0x154>)
 800362a:	4013      	ands	r3, r2
 800362c:	0019      	movs	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2220      	movs	r2, #32
 8003640:	4013      	ands	r3, r2
 8003642:	d00b      	beq.n	800365c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <UART_AdvFeatureConfig+0x158>)
 800364c:	4013      	ands	r3, r2
 800364e:	0019      	movs	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	4013      	ands	r3, r2
 8003664:	d01d      	beq.n	80036a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <UART_AdvFeatureConfig+0x15c>)
 800366e:	4013      	ands	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	035b      	lsls	r3, r3, #13
 8003686:	429a      	cmp	r2, r3
 8003688:	d10b      	bne.n	80036a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <UART_AdvFeatureConfig+0x160>)
 8003692:	4013      	ands	r3, r2
 8003694:	0019      	movs	r1, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	4013      	ands	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <UART_AdvFeatureConfig+0x164>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	fffdffff 	.word	0xfffdffff
 80036d0:	fffeffff 	.word	0xfffeffff
 80036d4:	fffbffff 	.word	0xfffbffff
 80036d8:	ffff7fff 	.word	0xffff7fff
 80036dc:	ffffefff 	.word	0xffffefff
 80036e0:	ffffdfff 	.word	0xffffdfff
 80036e4:	ffefffff 	.word	0xffefffff
 80036e8:	ff9fffff 	.word	0xff9fffff
 80036ec:	fff7ffff 	.word	0xfff7ffff

080036f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b092      	sub	sp, #72	; 0x48
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2284      	movs	r2, #132	; 0x84
 80036fc:	2100      	movs	r1, #0
 80036fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003700:	f7fd faa0 	bl	8000c44 <HAL_GetTick>
 8003704:	0003      	movs	r3, r0
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2208      	movs	r2, #8
 8003710:	4013      	ands	r3, r2
 8003712:	2b08      	cmp	r3, #8
 8003714:	d12c      	bne.n	8003770 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	0391      	lsls	r1, r2, #14
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4a46      	ldr	r2, [pc, #280]	; (8003838 <UART_CheckIdleState+0x148>)
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	f000 f88c 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d021      	beq.n	8003770 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372c:	f3ef 8310 	mrs	r3, PRIMASK
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
 8003736:	2301      	movs	r3, #1
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	f383 8810 	msr	PRIMASK, r3
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	438a      	bics	r2, r1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	f383 8810 	msr	PRIMASK, r3
}
 800375c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2278      	movs	r2, #120	; 0x78
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e05f      	b.n	8003830 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2204      	movs	r2, #4
 8003778:	4013      	ands	r3, r2
 800377a:	2b04      	cmp	r3, #4
 800377c:	d146      	bne.n	800380c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003780:	2280      	movs	r2, #128	; 0x80
 8003782:	03d1      	lsls	r1, r2, #15
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <UART_CheckIdleState+0x148>)
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	f000 f858 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d03b      	beq.n	800380c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003794:	f3ef 8310 	mrs	r3, PRIMASK
 8003798:	60fb      	str	r3, [r7, #12]
  return(result);
 800379a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
 800379e:	2301      	movs	r3, #1
 80037a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4921      	ldr	r1, [pc, #132]	; (800383c <UART_CheckIdleState+0x14c>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f383 8810 	msr	PRIMASK, r3
}
 80037c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80037cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
 80037d0:	2301      	movs	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f383 8810 	msr	PRIMASK, r3
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2101      	movs	r1, #1
 80037e8:	438a      	bics	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f383 8810 	msr	PRIMASK, r3
}
 80037f6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	2120      	movs	r1, #32
 80037fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2278      	movs	r2, #120	; 0x78
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e011      	b.n	8003830 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	2120      	movs	r1, #32
 8003818:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2278      	movs	r2, #120	; 0x78
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b010      	add	sp, #64	; 0x40
 8003836:	bd80      	pop	{r7, pc}
 8003838:	01ffffff 	.word	0x01ffffff
 800383c:	fffffedf 	.word	0xfffffedf

08003840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003850:	e04b      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	3301      	adds	r3, #1
 8003856:	d048      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fd f9f4 	bl	8000c44 <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e04b      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2204      	movs	r2, #4
 800387a:	4013      	ands	r3, r2
 800387c:	d035      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2208      	movs	r2, #8
 8003886:	4013      	ands	r3, r2
 8003888:	2b08      	cmp	r3, #8
 800388a:	d111      	bne.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2208      	movs	r2, #8
 8003892:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	0018      	movs	r0, r3
 8003898:	f000 f906 	bl	8003aa8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2284      	movs	r2, #132	; 0x84
 80038a0:	2108      	movs	r1, #8
 80038a2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2278      	movs	r2, #120	; 0x78
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e02c      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	401a      	ands	r2, r3
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d112      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 f8e9 	bl	8003aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2284      	movs	r2, #132	; 0x84
 80038da:	2120      	movs	r1, #32
 80038dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2278      	movs	r2, #120	; 0x78
 80038e2:	2100      	movs	r1, #0
 80038e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e00f      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	425a      	negs	r2, r3
 80038fa:	4153      	adcs	r3, r2
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	001a      	movs	r2, r3
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d0a4      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b090      	sub	sp, #64	; 0x40
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1dba      	adds	r2, r7, #6
 800392c:	2158      	movs	r1, #88	; 0x58
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1dba      	adds	r2, r7, #6
 8003936:	215a      	movs	r1, #90	; 0x5a
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	015b      	lsls	r3, r3, #5
 800394a:	429a      	cmp	r2, r3
 800394c:	d10d      	bne.n	800396a <UART_Start_Receive_IT+0x56>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <UART_Start_Receive_IT+0x4c>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	225c      	movs	r2, #92	; 0x5c
 800395a:	4950      	ldr	r1, [pc, #320]	; (8003a9c <UART_Start_Receive_IT+0x188>)
 800395c:	5299      	strh	r1, [r3, r2]
 800395e:	e02e      	b.n	80039be <UART_Start_Receive_IT+0xaa>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	225c      	movs	r2, #92	; 0x5c
 8003964:	21ff      	movs	r1, #255	; 0xff
 8003966:	5299      	strh	r1, [r3, r2]
 8003968:	e029      	b.n	80039be <UART_Start_Receive_IT+0xaa>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10d      	bne.n	800398e <UART_Start_Receive_IT+0x7a>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <UART_Start_Receive_IT+0x70>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	225c      	movs	r2, #92	; 0x5c
 800397e:	21ff      	movs	r1, #255	; 0xff
 8003980:	5299      	strh	r1, [r3, r2]
 8003982:	e01c      	b.n	80039be <UART_Start_Receive_IT+0xaa>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	225c      	movs	r2, #92	; 0x5c
 8003988:	217f      	movs	r1, #127	; 0x7f
 800398a:	5299      	strh	r1, [r3, r2]
 800398c:	e017      	b.n	80039be <UART_Start_Receive_IT+0xaa>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	055b      	lsls	r3, r3, #21
 8003996:	429a      	cmp	r2, r3
 8003998:	d10d      	bne.n	80039b6 <UART_Start_Receive_IT+0xa2>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <UART_Start_Receive_IT+0x98>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	225c      	movs	r2, #92	; 0x5c
 80039a6:	217f      	movs	r1, #127	; 0x7f
 80039a8:	5299      	strh	r1, [r3, r2]
 80039aa:	e008      	b.n	80039be <UART_Start_Receive_IT+0xaa>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	225c      	movs	r2, #92	; 0x5c
 80039b0:	213f      	movs	r1, #63	; 0x3f
 80039b2:	5299      	strh	r1, [r3, r2]
 80039b4:	e003      	b.n	80039be <UART_Start_Receive_IT+0xaa>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	225c      	movs	r2, #92	; 0x5c
 80039ba:	2100      	movs	r1, #0
 80039bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2284      	movs	r2, #132	; 0x84
 80039c2:	2100      	movs	r1, #0
 80039c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	2122      	movs	r1, #34	; 0x22
 80039cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ce:	f3ef 8310 	mrs	r3, PRIMASK
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d8:	2301      	movs	r3, #1
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039de:	f383 8810 	msr	PRIMASK, r3
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	015b      	lsls	r3, r3, #5
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d107      	bne.n	8003a1c <UART_Start_Receive_IT+0x108>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <UART_Start_Receive_IT+0x18c>)
 8003a18:	669a      	str	r2, [r3, #104]	; 0x68
 8003a1a:	e002      	b.n	8003a22 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a21      	ldr	r2, [pc, #132]	; (8003aa4 <UART_Start_Receive_IT+0x190>)
 8003a20:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a30:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34
 8003a34:	2301      	movs	r3, #1
 8003a36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f383 8810 	msr	PRIMASK, r3
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2190      	movs	r1, #144	; 0x90
 8003a4c:	0049      	lsls	r1, r1, #1
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	e018      	b.n	8003a90 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a62:	613b      	str	r3, [r7, #16]
  return(result);
 8003a64:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a68:	2301      	movs	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f383 8810 	msr	PRIMASK, r3
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2120      	movs	r1, #32
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f383 8810 	msr	PRIMASK, r3
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b010      	add	sp, #64	; 0x40
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	000001ff 	.word	0x000001ff
 8003aa0:	08003dad 	.word	0x08003dad
 8003aa4:	08003bf5 	.word	0x08003bf5

08003aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08e      	sub	sp, #56	; 0x38
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ab6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aba:	2301      	movs	r3, #1
 8003abc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4926      	ldr	r1, [pc, #152]	; (8003b6c <UART_EndRxTransfer+0xc4>)
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
 8003aec:	2301      	movs	r3, #1
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d118      	bne.n	8003b4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b20:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b26:	2301      	movs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f383 8810 	msr	PRIMASK, r3
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2110      	movs	r1, #16
 8003b3e:	438a      	bics	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f383 8810 	msr	PRIMASK, r3
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2280      	movs	r2, #128	; 0x80
 8003b52:	2120      	movs	r1, #32
 8003b54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b00e      	add	sp, #56	; 0x38
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	fffffedf 	.word	0xfffffedf

08003b70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	225a      	movs	r2, #90	; 0x5a
 8003b82:	2100      	movs	r1, #0
 8003b84:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2252      	movs	r2, #82	; 0x52
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7ff fba5 	bl	80032e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2140      	movs	r1, #64	; 0x40
 8003bc8:	438a      	bics	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7ff fb6a 	bl	80032c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b006      	add	sp, #24
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b094      	sub	sp, #80	; 0x50
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003bfc:	204e      	movs	r0, #78	; 0x4e
 8003bfe:	183b      	adds	r3, r7, r0
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	215c      	movs	r1, #92	; 0x5c
 8003c04:	5a52      	ldrh	r2, [r2, r1]
 8003c06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	589b      	ldr	r3, [r3, r2]
 8003c0e:	2b22      	cmp	r3, #34	; 0x22
 8003c10:	d000      	beq.n	8003c14 <UART_RxISR_8BIT+0x20>
 8003c12:	e0ba      	b.n	8003d8a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	214c      	movs	r1, #76	; 0x4c
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003c1e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	183b      	adds	r3, r7, r0
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b2d9      	uxtb	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	400a      	ands	r2, r1
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	225a      	movs	r2, #90	; 0x5a
 8003c44:	5a9b      	ldrh	r3, [r3, r2]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b299      	uxth	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	225a      	movs	r2, #90	; 0x5a
 8003c50:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	225a      	movs	r2, #90	; 0x5a
 8003c56:	5a9b      	ldrh	r3, [r3, r2]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d000      	beq.n	8003c60 <UART_RxISR_8BIT+0x6c>
 8003c5e:	e09c      	b.n	8003d9a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4948      	ldr	r1, [pc, #288]	; (8003da4 <UART_RxISR_8BIT+0x1b0>)
 8003c82:	400a      	ands	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c92:	f3ef 8310 	mrs	r3, PRIMASK
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	2120      	movs	r1, #32
 8003cca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cea:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cec:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cee:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f383 8810 	msr	PRIMASK, r3
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4928      	ldr	r1, [pc, #160]	; (8003da8 <UART_RxISR_8BIT+0x1b4>)
 8003d08:	400a      	ands	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	f383 8810 	msr	PRIMASK, r3
}
 8003d16:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d12f      	bne.n	8003d80 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d26:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d2c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	2301      	movs	r3, #1
 8003d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f383 8810 	msr	PRIMASK, r3
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2110      	movs	r1, #16
 8003d48:	438a      	bics	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f383 8810 	msr	PRIMASK, r3
}
 8003d56:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d103      	bne.n	8003d6e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2258      	movs	r2, #88	; 0x58
 8003d72:	5a9a      	ldrh	r2, [r3, r2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	0011      	movs	r1, r2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7ff fab9 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d7e:	e00c      	b.n	8003d9a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7ff faa4 	bl	80032d0 <HAL_UART_RxCpltCallback>
}
 8003d88:	e007      	b.n	8003d9a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2108      	movs	r1, #8
 8003d96:	430a      	orrs	r2, r1
 8003d98:	619a      	str	r2, [r3, #24]
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b014      	add	sp, #80	; 0x50
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	fffffedf 	.word	0xfffffedf
 8003da8:	fbffffff 	.word	0xfbffffff

08003dac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b094      	sub	sp, #80	; 0x50
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003db4:	204e      	movs	r0, #78	; 0x4e
 8003db6:	183b      	adds	r3, r7, r0
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	215c      	movs	r1, #92	; 0x5c
 8003dbc:	5a52      	ldrh	r2, [r2, r1]
 8003dbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	589b      	ldr	r3, [r3, r2]
 8003dc6:	2b22      	cmp	r3, #34	; 0x22
 8003dc8:	d000      	beq.n	8003dcc <UART_RxISR_16BIT+0x20>
 8003dca:	e0ba      	b.n	8003f42 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	214c      	movs	r1, #76	; 0x4c
 8003dd2:	187b      	adds	r3, r7, r1
 8003dd4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003dd6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	183a      	adds	r2, r7, r0
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	8812      	ldrh	r2, [r2, #0]
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df2:	1c9a      	adds	r2, r3, #2
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	225a      	movs	r2, #90	; 0x5a
 8003dfc:	5a9b      	ldrh	r3, [r3, r2]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b299      	uxth	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	225a      	movs	r2, #90	; 0x5a
 8003e08:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	225a      	movs	r2, #90	; 0x5a
 8003e0e:	5a9b      	ldrh	r3, [r3, r2]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d000      	beq.n	8003e18 <UART_RxISR_16BIT+0x6c>
 8003e16:	e09c      	b.n	8003f52 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	623b      	str	r3, [r7, #32]
  return(result);
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e20:	647b      	str	r3, [r7, #68]	; 0x44
 8003e22:	2301      	movs	r3, #1
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f383 8810 	msr	PRIMASK, r3
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4948      	ldr	r1, [pc, #288]	; (8003f5c <UART_RxISR_16BIT+0x1b0>)
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40
 8003e54:	2301      	movs	r3, #1
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	f383 8810 	msr	PRIMASK, r3
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	438a      	bics	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	2120      	movs	r1, #32
 8003e82:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d018      	beq.n	8003ed0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea2:	617b      	str	r3, [r7, #20]
  return(result);
 8003ea4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4928      	ldr	r1, [pc, #160]	; (8003f60 <UART_RxISR_16BIT+0x1b4>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d12f      	bne.n	8003f38 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ede:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ee4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee8:	2301      	movs	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2110      	movs	r1, #16
 8003f00:	438a      	bics	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f383 8810 	msr	PRIMASK, r3
}
 8003f0e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	2210      	movs	r2, #16
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d103      	bne.n	8003f26 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2210      	movs	r2, #16
 8003f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2258      	movs	r2, #88	; 0x58
 8003f2a:	5a9a      	ldrh	r2, [r3, r2]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7ff f9dd 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f36:	e00c      	b.n	8003f52 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7ff f9c8 	bl	80032d0 <HAL_UART_RxCpltCallback>
}
 8003f40:	e007      	b.n	8003f52 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2108      	movs	r1, #8
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	619a      	str	r2, [r3, #24]
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b014      	add	sp, #80	; 0x50
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	fffffedf 	.word	0xfffffedf
 8003f60:	fbffffff 	.word	0xfbffffff

08003f64 <__libc_init_array>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	2600      	movs	r6, #0
 8003f68:	4d0c      	ldr	r5, [pc, #48]	; (8003f9c <__libc_init_array+0x38>)
 8003f6a:	4c0d      	ldr	r4, [pc, #52]	; (8003fa0 <__libc_init_array+0x3c>)
 8003f6c:	1b64      	subs	r4, r4, r5
 8003f6e:	10a4      	asrs	r4, r4, #2
 8003f70:	42a6      	cmp	r6, r4
 8003f72:	d109      	bne.n	8003f88 <__libc_init_array+0x24>
 8003f74:	2600      	movs	r6, #0
 8003f76:	f000 f821 	bl	8003fbc <_init>
 8003f7a:	4d0a      	ldr	r5, [pc, #40]	; (8003fa4 <__libc_init_array+0x40>)
 8003f7c:	4c0a      	ldr	r4, [pc, #40]	; (8003fa8 <__libc_init_array+0x44>)
 8003f7e:	1b64      	subs	r4, r4, r5
 8003f80:	10a4      	asrs	r4, r4, #2
 8003f82:	42a6      	cmp	r6, r4
 8003f84:	d105      	bne.n	8003f92 <__libc_init_array+0x2e>
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	00b3      	lsls	r3, r6, #2
 8003f8a:	58eb      	ldr	r3, [r5, r3]
 8003f8c:	4798      	blx	r3
 8003f8e:	3601      	adds	r6, #1
 8003f90:	e7ee      	b.n	8003f70 <__libc_init_array+0xc>
 8003f92:	00b3      	lsls	r3, r6, #2
 8003f94:	58eb      	ldr	r3, [r5, r3]
 8003f96:	4798      	blx	r3
 8003f98:	3601      	adds	r6, #1
 8003f9a:	e7f2      	b.n	8003f82 <__libc_init_array+0x1e>
 8003f9c:	0800401c 	.word	0x0800401c
 8003fa0:	0800401c 	.word	0x0800401c
 8003fa4:	0800401c 	.word	0x0800401c
 8003fa8:	08004020 	.word	0x08004020

08003fac <memset>:
 8003fac:	0003      	movs	r3, r0
 8003fae:	1882      	adds	r2, r0, r2
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <memset+0xa>
 8003fb4:	4770      	bx	lr
 8003fb6:	7019      	strb	r1, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	e7f9      	b.n	8003fb0 <memset+0x4>

08003fbc <_init>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr

08003fc8 <_fini>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr
